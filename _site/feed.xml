<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to HuluCat&#39;s Blog</title>
    <description>Goals determine what you’re going to be.</description>
    <link>https//majinshou.github.io/</link>
    <atom:link href="https//majinshou.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 03 Aug 2016 19:14:22 +0800</pubDate>
    <lastBuildDate>Wed, 03 Aug 2016 19:14:22 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>The Colorful UILabel in iOS</title>
        <description>&lt;h1 id=&quot;the-colorful-uilabel-in-ios-development&quot;&gt;The Colorful UILabel in iOS development&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Once up on a time,I had a request which needed to display a colorful UILabel in the screen.&lt;/p&gt;

&lt;p&gt;The product manager said the colorful texts can catch the eyes of audiences.&lt;/p&gt;

&lt;p&gt;OK,I sure chose to believe them.&lt;/p&gt;

&lt;p&gt;Then,I had a question:&lt;/p&gt;

&lt;h2 id=&quot;how-to-set-different-colors-to-each-word-in-the-uilabel&quot;&gt;1. How to set different colors to each word in the UILabel?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;I started my work with my own ideas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An UILabel can display the texts;&lt;/li&gt;
  &lt;li&gt;The color of the texts can be set by ‘UILabel.textColor’;&lt;/li&gt;
  &lt;li&gt;Adding two UILabels with different colors will do;&lt;/li&gt;
  &lt;li&gt;Excellent! (I said to myself).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I opened the Xcode.app to edit my codes like this:&lt;/p&gt;

&lt;h3 id=&quot;the-way-i-did-in-the-past-time&quot;&gt;1.1 The way I did in the past time&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 Initializes a colorful label container view
 
 - returns: A colorful label container view instance
 */
func initColorfulLabel() -&amp;gt; UIView {
    let containerViewFrame:CGRect = CGRect(x: -7, y: 100, width: self.view.bounds.width, height: 20);
    let containerView:UIView = UIView(frame: containerViewFrame);
    
    let redLabelFrame = CGRect(x: 0, y: 0, width: containerView.bounds.width / 2, height: 20);
    let redLabel:UILabel = UILabel(frame: redLabelFrame);
    redLabel.text = &quot;RED&quot;;
    redLabel.textColor = UIColor.redColor();
    redLabel.textAlignment = NSTextAlignment.Right;
    
    containerView.addSubview(redLabel);
    
    let blueLabelFrame = CGRect(x: containerView.bounds.width / 2, y: 0, width: containerView.bounds.width / 2, height: 20);
    let blueLabel:UILabel = UILabel(frame: blueLabelFrame);
    blueLabel.text = &quot; BLUE&quot;;
    blueLabel.textColor = UIColor.blueColor();
    blueLabel.textAlignment = NSTextAlignment.Left;
    
    containerView.addSubview(blueLabel);
    
    
    return containerView;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Oh,My God,It worked! ^0^:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/colorful-uilabel/colorfulLabelsInContainerView.png&quot; alt=&quot;colorfulLabelsInContainerView.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-suggested-way-a-mentor-told-me-recently&quot;&gt;1.2 The suggested way a mentor told me recently&lt;/h3&gt;

&lt;p&gt;My mentor told me that UILabel supports different texts with different colors by setting UILabel’s attributedText.&lt;/p&gt;

&lt;p&gt;Here is the newer one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 Initializes a real colorful UILabel instance instead of a container view,this method is guided by a mentor
 
 - returns: A real colorful UILabel instance
 */
func initColorfulLabelOfMentor() -&amp;gt; UILabel {
    let str:NSMutableAttributedString = NSMutableAttributedString(string: &quot;RED BLUE&quot;);
    str.addAttribute(NSForegroundColorAttributeName, value: UIColor.redColor(), range: NSMakeRange(0, 3));
    str.addAttribute(NSForegroundColorAttributeName, value: UIColor.blueColor(), range: NSMakeRange(4, 4));
    
    let labelFrame = CGRect(x: 0, y: 140, width: self.view.bounds.width, height: 20);
    let label:UILabel = UILabel(frame: labelFrame);
    label.attributedText = str;
    label.textAlignment = NSTextAlignment.Center;
    
    
    return label;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It works too:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/colorful-uilabel/colorfulLabel.png&quot; alt=&quot;colorfulLabel.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After I made the colorful texts in the screen,the product manager said we still need to add a shadow to the text, and again, for catching the eyes of audiences.&lt;/p&gt;

&lt;p&gt;OK,I would do it. Because I always chose to believe them.&lt;/p&gt;

&lt;p&gt;So,I had a new question here:&lt;/p&gt;

&lt;h2 id=&quot;how-to-add-a-shadow-to-the-words-in-uilabel&quot;&gt;2. How to add a shadow to the words in UILabel?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;I started my thinking again,of course I chose to add two different UILabels to make the shadow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add an UILabel to display the given texts with certain color(color of the shadow);&lt;/li&gt;
  &lt;li&gt;Add another UILabel to display the texts with shadow color;&lt;/li&gt;
  &lt;li&gt;Put the two UILabels together into a container UIView to make a shadow;&lt;/li&gt;
  &lt;li&gt;Return the UIView instance called ‘containerView’.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So,I put my ideas into codes:&lt;/p&gt;

&lt;h3 id=&quot;the-way-i-did-in-the-past-time-1&quot;&gt;2.1 The way I did in the past time&lt;/h3&gt;

&lt;p&gt;Here is the implementation of my idea:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 Initializes a shadow label container view
 
 - returns: A UIView instance which contains two UILabels to display a shadow
 */
func initShadowLabel() -&amp;gt; UIView {
    
    let containerViewFrame:CGRect = CGRect(x: 0, y: 180, width: self.view.bounds.width, height: 20);
    let containerView:UIView = UIView(frame: containerViewFrame);
    
    let lowerLabelFrame = CGRect(x: 1, y: 1, width: self.view.bounds.width, height: 20);
    let lowerLabel:UILabel = UILabel(frame: lowerLabelFrame);
    lowerLabel.text = &quot;LABEL WITH SHADOW&quot;;
    lowerLabel.textColor = UIColor.blueColor();
    lowerLabel.textAlignment = NSTextAlignment.Center;
    
    containerView.addSubview(lowerLabel);
    
    
    let upperLabelFrame = CGRect(x: 0, y: 0, width: self.view.bounds.width, height: 20);
    let upperLabel:UILabel = UILabel(frame: upperLabelFrame);
    upperLabel.text = &quot;LABEL WITH SHADOW&quot;;
    upperLabel.textColor = UIColor.redColor();
    upperLabel.textAlignment = NSTextAlignment.Center;
    
    containerView.addSubview(upperLabel);
    
    
    return containerView;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Oh,My God,It worked again:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/colorful-uilabel/shadowLabelsInContainerView.png&quot; alt=&quot;shadowLabelsInContainerView.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-suggested-way-of-a-mentor&quot;&gt;2.2 The suggested way of a mentor&lt;/h3&gt;

&lt;p&gt;Once again,a mentor occured,And he gave me another way to implement the shadow in UILabel:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 Initializes a real shadow UILabel instance instead of a container view,this method is guided by a mentor
 
 - returns: A UILabel which has a shadow
 */
func initShadowLabelOfMentor() -&amp;gt; UILabel {
    
    let labelFrame = CGRect(x: 0, y: 220, width: self.view.bounds.width, height: 20);
    let label:UILabel = UILabel(frame: labelFrame);
    label.text = &quot;LABEL WITH SHADOW&quot;;
    label.textColor = UIColor.redColor();
    label.shadowColor = UIColor.blueColor();
    label.shadowOffset = CGSize(width: 1, height: 1);
    label.textAlignment = NSTextAlignment.Center;
    
    
    return label;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See? It is more simple and clearer.&lt;/p&gt;

&lt;p&gt;Here is the result in picture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/colorful-uilabel/shadowLabel.png&quot; alt=&quot;shadowLabel.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;3. Source Code:&lt;/h2&gt;

&lt;p&gt;You can find all the codes &lt;a href=&quot;https://github.com/majinshou/ColorfulLabel&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 02 Aug 2016 19:36:51 +0800</pubDate>
        <link>https//majinshou.github.io/ios/2016/08/02/the-colorful-uilabel.html</link>
        <guid isPermaLink="true">https//majinshou.github.io/ios/2016/08/02/the-colorful-uilabel.html</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>The source code preview of last post of &#39;What are Markdown Documents?&#39;</title>
        <description>&lt;h1 id=&quot;we-will-use-official-document-of-mouhttp25io-to-explain-markdown&quot;&gt;We will use official document of &lt;a href=&quot;http://25.io&quot;&gt;Mou&lt;/a&gt; to explain ‘Markdown’:&lt;/h1&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Mou

![Mou icon](http://25.io/mou/Mou_128.png)

## Overview

**Mou**, the missing Markdown editor for *web developers*.

### Syntax

#### Strong and Emphasize 

**strong** or __strong__ ( Cmd + B )

*emphasize* or _emphasize_ ( Cmd + I )

**Sometimes I want a lot of text to be bold.
Like, seriously, a _LOT_ of text**

#### Blockquotes

&amp;gt; Right angle brackets &amp;amp;gt; are used for block quotes.

#### Links and Email

An email &amp;lt;example@example.com&amp;gt; link.

Simple inline link &amp;lt;http://chenluois.com&amp;gt;, another inline link [Smaller](http://25.io/smaller/), one more inline link with title [Resize](http://resizesafari.com &quot;a Safari extension&quot;).

A [reference style][id] link. Input id, then anywhere in the doc, define the link with corresponding id:

[id]: http://25.io/mou/ &quot;Markdown editor on Mac OS X&quot;

Titles ( or called tool tips ) in the links are optional.

#### Images

An inline image ![Smaller icon](http://25.io/smaller/favicon.ico &quot;Title here&quot;), title is optional.

A ![Resize icon][2] reference style image.

[2]: http://resizesafari.com/favicon.ico &quot;Title&quot;

#### Inline code and Block code

Inline code are surround by `backtick` key. To create a block code:

	Indent each line by at least 1 tab, or 4 spaces.
    var Mou = exactlyTheAppIwant; 

####  Ordered Lists

Ordered lists are created using &quot;1.&quot; + Space:

1. Ordered list item
2. Ordered list item
3. Ordered list item

#### Unordered Lists

Unordered list are created using &quot;*&quot; + Space:

* Unordered list item
* Unordered list item
* Unordered list item 

Or using &quot;-&quot; + Space:

- Unordered list item
- Unordered list item
- Unordered list item

#### Hard Linebreak

End a line with two or more spaces will create a hard linebreak, called `&amp;lt;br /&amp;gt;` in HTML. ( Control + Return )  
Above line ended with 2 spaces.

#### Horizontal Rules

Three or more asterisks or dashes:

***

---

- - - -

#### Headers

Setext-style:

This is H1
==========

This is H2
----------

atx-style:

# This is H1
## This is H2
### This is H3
#### This is H4
##### This is H5
###### This is H6


### Extra Syntax

#### Footnotes

Footnotes work mostly like reference-style links. A footnote is made of two things: a marker in the text that will become a superscript number; a footnote definition that will be placed in a list of footnotes at the end of the document. A footnote looks like this:

That&#39;s some text with a footnote.[^1]

[^1]: And that&#39;s the footnote.


#### Strikethrough

Wrap with 2 tilde characters:

~~Strikethrough~~


#### Fenced Code Blocks

Start with a line containing 3 or more backticks, and ends with the first line with the same number of backticks:

Begin with ```
Fenced code blocks are like Stardard Markdown’s regular code
blocks, except that they’re not indented and instead rely on
a start and end fence lines to delimit the code block.
End with ```

#### Tables

A simple table looks like this:

First Header | Second Header | Third Header
------------ | ------------- | ------------
Content Cell | Content Cell  | Content Cell
Content Cell | Content Cell  | Content Cell

If you wish, you can add a leading and tailing pipe to each line of the table:

| First Header | Second Header | Third Header |
| ------------ | ------------- | ------------ |
| Content Cell | Content Cell  | Content Cell |
| Content Cell | Content Cell  | Content Cell |

Specify alignment for each column by adding colons to separator lines:

First Header | Second Header | Third Header
:----------- | :-----------: | -----------:
Left         | Center        | Right
Left         | Center        | Right


### Shortcuts

#### View

* Toggle live preview: Shift + Cmd + I
* Toggle Words Counter: Shift + Cmd + W
* Toggle Transparent: Shift + Cmd + T
* Toggle Floating: Shift + Cmd + F
* Left/Right = 1/1: Cmd + 0
* Left/Right = 3/1: Cmd + +
* Left/Right = 1/3: Cmd + -
* Toggle Writing orientation: Cmd + L
* Toggle fullscreen: Control + Cmd + F

#### Actions

* Copy HTML: Option + Cmd + C
* Strong: Select text, Cmd + B
* Emphasize: Select text, Cmd + I
* Inline Code: Select text, Cmd + K
* Strikethrough: Select text, Cmd + U
* Link: Select text, Control + Shift + L
* Image: Select text, Control + Shift + I
* Select Word: Control + Option + W
* Select Line: Shift + Cmd + L
* Select All: Cmd + A
* Deselect All: Cmd + D
* Convert to Uppercase: Select text, Control + U
* Convert to Lowercase: Select text, Control + Shift + U
* Convert to Titlecase: Select text, Control + Option + U
* Convert to List: Select lines, Control + L
* Convert to Blockquote: Select lines, Control + Q
* Convert to H1: Cmd + 1
* Convert to H2: Cmd + 2
* Convert to H3: Cmd + 3
* Convert to H4: Cmd + 4
* Convert to H5: Cmd + 5
* Convert to H6: Cmd + 6
* Convert Spaces to Tabs: Control + [
* Convert Tabs to Spaces: Control + ]
* Insert Current Date: Control + Shift + 1
* Insert Current Time: Control + Shift + 2
* Insert entity &amp;lt;: Control + Shift + ,
* Insert entity &amp;gt;: Control + Shift + .
* Insert entity &amp;amp;: Control + Shift + 7
* Insert entity Space: Control + Shift + Space
* Insert Scriptogr.am Header: Control + Shift + G
* Shift Line Left: Select lines, Cmd + [
* Shift Line Right: Select lines, Cmd + ]
* New Line: Cmd + Return
* Comment: Cmd + /
* Hard Linebreak: Control + Return

#### Edit

* Auto complete current word: Esc
* Find: Cmd + F
* Close find bar: Esc

#### Post

* Post on Scriptogr.am: Control + Shift + S
* Post on Tumblr: Control + Shift + T

#### Export

* Export HTML: Option + Cmd + E
* Export PDF:  Option + Cmd + P


### And more?

Don&#39;t forget to check Preferences, lots of useful options are there.

Follow [@Mou](https://twitter.com/mou) on Twitter for the latest news.

For feedback, use the menu `Help` - `Send Feedback`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 18:30:31 +0800</pubDate>
        <link>https//majinshou.github.io/markdown/2016/07/18/source-of-markdown-documents.html</link>
        <guid isPermaLink="true">https//majinshou.github.io/markdown/2016/07/18/source-of-markdown-documents.html</guid>
        
        
        <category>Markdown</category>
        
      </item>
    
      <item>
        <title>What are Markdown Documents?</title>
        <description>&lt;h1 id=&quot;we-will-use-official-document-of-mouhttp25io-to-explain-markdown&quot;&gt;We will use official document of &lt;a href=&quot;http://25.io&quot;&gt;Mou&lt;/a&gt; to explain ‘Markdown’:&lt;/h1&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/images/markdown-intro-01.png&quot; alt=&quot;Intro One&quot; /&gt;
&lt;img src=&quot;/images/markdown-intro-02.png&quot; alt=&quot;Intro Two&quot; /&gt;
&lt;img src=&quot;/images/markdown-intro-03.png&quot; alt=&quot;Intro Three&quot; /&gt;
&lt;img src=&quot;/images/markdown-intro-04.png&quot; alt=&quot;Intro Four&quot; /&gt;
&lt;img src=&quot;/images/markdown-intro-05.png&quot; alt=&quot;Intro Five&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 18 Jul 2016 18:17:31 +0800</pubDate>
        <link>https//majinshou.github.io/markdown/2016/07/18/what-are-markdown-documents.html</link>
        <guid isPermaLink="true">https//majinshou.github.io/markdown/2016/07/18/what-are-markdown-documents.html</guid>
        
        
        <category>Markdown</category>
        
      </item>
    
      <item>
        <title>What is MVC,MVP and MVVM</title>
        <description>&lt;p&gt;Check the &lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html&quot;&gt;MVC，MVP 和 MVVM 的图示&lt;/a&gt; to view detail info.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 10:28:31 +0800</pubDate>
        <link>https//majinshou.github.io/design-pattern/2016/07/18/what-is-MVC-MVP-MVVM.html</link>
        <guid isPermaLink="true">https//majinshou.github.io/design-pattern/2016/07/18/what-is-MVC-MVP-MVVM.html</guid>
        
        
        <category>Design-Pattern</category>
        
      </item>
    
  </channel>
</rss>
