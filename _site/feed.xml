<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Acttos</title>
    <description>Goals determine what you’re going to be.</description>
    <link>http://www.acttos.org/</link>
    <atom:link href="http://www.acttos.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 02 Dec 2016 10:06:39 +0800</pubDate>
    <lastBuildDate>Fri, 02 Dec 2016 10:06:39 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>CUtil: A Common Utilities For iOS</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;介绍&lt;/h2&gt;

&lt;p&gt;CUtil是一个日常的、适用于iOS开发的、通用的、工具类的Framework，采用Objective-C编写。
所有代码来源并总结于平时，会不定期更新，欢迎&lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#099;&amp;#116;&amp;#116;&amp;#111;&amp;#115;&amp;#109;&amp;#097;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;提出意见和建议&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;使用方法&lt;/h2&gt;

&lt;h4 id=&quot;cocoapods&quot;&gt;使用CocoaPods：&lt;/h4&gt;
&lt;p&gt;CUtil已经支持通过Cocoapods进行安装：&lt;/p&gt;

&lt;p&gt;在工程的Podfile中添加：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'CUtil'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者指定版本号，不指定版本号会默认安装最新版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'CUtil', '~&amp;gt; x.x.x'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;CUtil在CocoaPods中的版本请参见：&lt;a href=&quot;https://cocoapods.org/pods/CUtil&quot; target=&quot;_blank&quot;&gt;CocoaPods-CUtil&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;然后在需要使用到CUtil的地方添加引入Module：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@import CUtil;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;cocoapods-1&quot;&gt;未使用CocoaPods:&lt;/h4&gt;
&lt;p&gt;如果工程尚未支持CocoaPods，则需要将CUtil下的所有文件拖拽到项目的frameworks下，并添加到Xcode的groups中。在需要使用CUtil的文件中引入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;CUtil/CUtil.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;功能介绍&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;存储功能相关&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;CUStorage.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  将自定义data的数据写入系统Keychain中，data的值不随app的卸载、重装而发生变化，常用于存储固定的UserId。
 *
 *  @param key  用来存储数据的Key
 *  @param data 需要存储的数据
 *  @warning 跟Keychain相关的读写操作，仅在真机上验证通过
 */
+ (void)storeInKeychainWithKey:(NSString *)key data:(id)data;

/**
 *  根据key名称获取写入系统Keychain的数据
 *
 *  @param key 获取数据对应的Key
 *
 *  @return 存储在keychain中的数据
 *  @warning 跟Keychain相关的读写操作，仅在真机上验证通过
 */
+ (id)loadFromKeychainWithKey:(NSString *)key;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;颜色设置相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUColor.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  根据传递的16进制数据生成UIColor实例
 *
 *  @param hexValue 16进制的颜色表示方式。如：0xFF00FF
 *
 *  @return 对应色值的UIColor实例
 */
+ (UIColor *)colorWithHex:(NSInteger)hexValue;

/**
 *  根据传递的16进制数据生成UIColor实例，该UIColor包含指定的透明度
 *
 *  @param hexValue 16进制的颜色表示方式。如：0xFF00FF
 *  @param alpha    颜色的透明度
 *
 *  @return 对应色值的UIColor实例
 */
+ (UIColor *)colorWithHex:(NSInteger)hexValue alpha:(CGFloat)alpha;

/**
 *  根据传递的色值字符串生成UIColor实例
 *
 *  @param hexString 以##开头的16进制色值字符串。如：##FF00FF
 *
 *  @return 对应色值的UIColor实例
 */
+ (UIColor *)colorWithHexString:(NSString *)hexString;

/**
 *  根据传递的色值字符串生成UIColor实例，该UIColor包含指定的透明度
 *
 *  @param hexString 以##开头的16进制色值字符串。如：##FF00FF
 *  @param alpha     颜色的透明度
 *
 *  @return 对应色值的UIColor实例
 */
+ (UIColor *)colorWithHexString:(NSString *)hexString alpha:(CGFloat)alpha;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;文件目录相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUFile.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  返回当前App的Documents路径
 *
 *  @return Documents的URL
 */
+ (NSURL *)getDocumentsDirectory;

/**
 在指定路径创建目录，创建的目录包括父目录。

 @param path 给定的创建目录
 
 @return 目录存在或创建成功：YES，否则：NO
 @warning 该方法的根目录为当前应用的data目录，所有目录的建立，均在此data目录下。PS：data目录可理解为沙河中可访问的顶层目录。
 */
+ (BOOL)createDirectoryAtPath:(NSString *)path;

/**
 在指定的path目录存储data数据

 @param data 要存储的数据
 @param path 存储数据的具体路径，注意这个路径是包含文件名的路径，不是存放文件的目录
 
 @return 保存成功：YES，否则：NO
 */
+ (BOOL)saveFile:(NSData *)data atPath:(NSString *)path;

/**
 在指定的path目录，按照fileName存储数据data。

 @param data 要存储的数据
 @param path 存储数据的具体目录，此处问文件存储的具体目录
 @param fileName 要存放的data的文件名称
 
 @return 保存成功：YES，否则：NO
 */
+ (BOOL)saveFile:(NSData *)data atPath:(NSString *)path withName:(NSString *)fileName;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;json&quot;&gt;JSON解析相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUJSON.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  根据给定的NSArray实例生成JSON字符串
 *
 *  @param array NSArray实例
 *
 *  @return NSArray对应的JSON字符串
 */
+(NSString *)JSONStringFromArray:(NSArray *)array;

/**
 *  根据给定的NSDictionary实例生成JSON字符串
 *
 *  @param dictionary NSDictionary实例
 *
 *  @return NSDictionary对应的JSON字符串
 */
+(NSString *)JSONStringFromDictionary:(NSDictionary *)dictionary;

/**
 *  将任意对象转换成JSON字符串，当给定object为nil或者不可解析为JSON时，返回错误
 *
 *  @param object 任意NSObject对象
 *
 *  @return 解析的JSON或错误内容
 */
+(NSString *)parseJSONStringFromObject:(NSObject *)object;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;日期操作相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUDate.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  根据当前时间创建时间戳
 *
 *  @return 当前时间的时间戳，精确到毫秒
 */
+(long long)generateMillisecondTime;

/**
 *  根据给定日期创建时间戳
 *
 *  @param date 需要转换为时间戳的NSDate对象
 *
 *  @return 转换后的时间戳，精确到毫秒
 */
+(long long)generateMillisecondTimeWithDate:(NSDate *)date;

/**
 *  将毫秒的时间转化为NSDate实例
 *
 *  @param milliseconds 某个时间对应的毫秒值
 *
 *  @return 给定时间戳对应的NSDate对象
 */
+(NSDate *)generateDateWithMilliseconds:(long long)milliseconds;

/**
 *  将NSDate对象进行格式化，采用当前时区
 *
 *  @param date   NSDate对象
 *  @param format 格式化字符串，如果为空或者nil，采用“yyyy-MM-dd HH:mm:ss”
 *
 *  @return 格式化后的字符串
 */
+(NSString *)stringOfDate:(NSDate *)date withFormat:(NSString *)format;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;系统配置操作相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUConfig.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 获取当前系统首选的语言标识

 @return 当前系统首选的语言，采用系统给出的值
 */
+ (NSString *)getDeviceLanguage;

/**
 获取当前系统的语言编码

 @return 语言编码，如：en,zh,ar,fr等
 */
+ (NSString *)getDeviceLanguageCode;

/**
 获取当先系统的国家或地区编码

 @return 国家或地区编码，如：CN,US,UK,AR,FR,TW,HK等
 */
+ (NSString *)getDeviceCountryCode;

/**
 以i18N的格式输出当前系统的语言和地域，如&quot;en_US,zh_CN,zh_TW,en_FR&quot;

 @return 将国家码和语言码组合后返回，是目前网络协议中常见的格式。
 */
+ (NSString *)getLocalStringIni18N;

/**
 是否为中文环境

 @return 中文：YES，否则：NO
 */
+ (BOOL)isChineseLang;

/**
 是否为阿拉伯语环境，因为阿拉伯语在界面布局时，需要从右向左设计，因此，这个方法有较高的使用率。
 
 @return 阿拉伯语：YES，否则：NO
 */
+ (BOOL)isArabicLang;

/**
 是否为法语环境
 
 @return 法语：YES，否则：NO
 */
+ (BOOL)isFrenchLang;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-8&quot;&gt;视图相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CULabel.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 计算一个UILabel视图在父视图中的大小和位置，UILabel的高度和宽度在实际布局中，还是很有实际意义的。

 @param label 要用于计算的UILabel实例
 @param view UILabel实例的父视图
 @return UILabel在父视图中的大小和位置参数
 */
+(CGSize)sizeOfLabel:(UILabel *)label inView:(UIView *)view;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;CUTipsView.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 已全屏幕的方式展现出一个带有转动菊花的Waiting视图

 @param tag 视图对应的tag，方便隐藏时使用
 @param _message Waiting视图中显示的文字消息
 */
+(void)showFullScreenWaitingViewWithTag:(NSUInteger)tag message:(NSString *)_message;

/**
 显示一个根据给定frame生成的带有转动菊花的Waiting视图

 @param tag 视图对应的tag，方便隐藏时使用
 @param _frame 视图整体的大小和位置参数
 @param _message Waiting视图中显示的文字消息
 */
+(void)showWaitingViewWithTag:(NSUInteger)tag frame:(CGRect)_frame message:(NSString *)_message;

/**
 在视图顶部显示的一个Tips视图，可包含文字和图片，该Tips视图会自动以向上滑出的方式消失

 @param _yOffset Tips视图距离屏幕顶部的偏移量，一般为0.0f
 @param aImage Tips视图中的图片，位于aMessage的左侧
 @param aMessage Tips视图中显示的文字消息
 @param view Tips视图的父View
 */
+(void)showPopDownTipsViewWithImage:(UIImage *)aImage message:(NSString *)aMessage yOffset:(CGFloat)_yOffset inView:(UIView *)view;

/**
 隐藏某个tag对应的视图，并从父视图中移除

 @param tag 视图对应的tag
 */
+(void)hideViewInWindowWithTag:(NSUInteger)tag;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-9&quot;&gt;编解码相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUCode.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 生成一个全球唯一的Id ^_-，可结合

 @return 全球唯一的编号
 */
+ (NSString *)uniqueIdentifier;


/**
 采用Keychain来保存唯一ID,如果之前有保存过，则覆盖旧值

 @param identifier 用来保存的唯一ID
 @warning 跟Keychain相关的读写操作，仅在真机上验证通过
 */
+ (void)saveInKeychainWithIdentifier:(NSString *)identifier;


/**
 从Keychain中加载保存的唯一ID

 @return Key中保存的唯一ID，如果之前未保存过，返回nil
 @warning 跟Keychain相关的读写操作，仅在真机上验证通过
 */
+ (NSString *)loadIdentifierFromKeychain;

/**
 将给定的字符串进行BASE64编码

 @param string 源字符串
 @return 经过BASE64编码后的字符串
 */
+ (NSString*) BASE64EncodeWithString:(NSString*)string;

/**
 将给定的字符串进行BASE64解码

 @param string 源字符串
 @return 经过BASE64解码后的字符串
 */
+ (NSString*) BASE64DecodeWithString:(NSString*)string;

/**
 将给定的字符串进行MD5摘要
 
 @param sourceString 源字符串
 @return 进行了MD5摘要后的字符串
 */
+ (NSString *) MD5CodeWithString:(NSString *)sourceString;

/**
 将给定的NSData实例进行MD5摘要
 
 @param data 给定的NSData实例
 @return 进行了MD5摘要后的字符串
 */
+ (NSString *) MD5CodeWithData:(NSData *) data;

/**
 根据给定的path对应的文件进行MD5摘要

 @param path 文件的path
 @return 文件的MD5摘要
 */
+ (NSString *) MD5CodeWithFileAtPath:(NSString *) path;

/**
 根据给定的url对应的文件进行MD5摘要
 
 @param url 文件的url
 @return 文件的MD5摘要
 */
+ (NSString *) MD5CodeWithFileAtURL:(NSURL *) url;

/**
 将给定的字符串进行SHA1摘要

 @param sourceString 源字符串
 @return 进行了SHA1摘要后的字符串
 */
+ (NSString *) SHA1CodeWithString:(NSString *)sourceString;

/**
 将给定的NSData实例进行SHA1摘要
 
 @param data 给定的NSData实例
 @return 进行了SHA1摘要后的字符串
 */
+ (NSString*) SHA1CodeWithData:(NSData*)data;

/**
 根据给定的path对应的文件进行SHA1摘要
 
 @param path 文件的path
 @return 文件的SHA1摘要
 */
+ (NSString *) SHA1CodeWithFileAtPath:(NSString *) path;

/**
 根据给定的url对应的文件进行SHA1摘要
 
 @param url 文件的url
 @return 文件的SHA1摘要
 */
+ (NSString *) SHA1CodeWithFileAtURL:(NSURL *) url;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-10&quot;&gt;开源协议&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/acttos/CommonUtilities&quot; target=&quot;_blank&quot;&gt; [CUtil] &lt;/a&gt; 基于 &lt;a href=&quot;https://mit-license.org/&quot;&gt; [The MIT License(MIT)] &lt;/a&gt; 协议开源。
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;感谢来访！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 02 Dec 2016 08:54:03 +0800</pubDate>
        <link>http://www.acttos.org/2016/12/Utilities-for-iOS/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/12/Utilities-for-iOS/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Design Pattern of Factory</title>
        <description>&lt;h2 id=&quot;summary&quot;&gt;1. Summary&lt;/h2&gt;

&lt;p&gt;When we development with some request description, we need to design a code struct to write codes with. The code struct design has some very famous design patterns when development. One of the most famous design pattern is called &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In our developments, we usually need some domain classes to handle the producing of objects, and most of the time, the layer of handling logic and the layer of creating objects are divided, standalone and have no interactions at all. Both of the layers do not need to know what is happening in the other side and do not care how the other side works.&lt;/p&gt;

&lt;p&gt;Design Pattern of &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory&lt;/code&gt; is a pattern producing objects in the development. It contains three different types of pattern: &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Factory Pattern&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory Methods Pattern&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Abstract Factory Pattern&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-three-design-patterns-of-factory&quot;&gt;2. The three design patterns of factory&lt;/h2&gt;

&lt;h3 id=&quot;simple-factory-pattern&quot;&gt;2.1. Simple Factory Pattern&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Factory Pattern&lt;/code&gt; is the simplest pattern of ‘Factory’, it just creates products and return the objects, we can define a simple factory like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class SimpleFactory {
	private static SimpleFactory instance;

	private SimpleFactory() {
		super();
	}

	public static SimpleFactory instance() {
		if (instance == null) {
			instance = new SimpleFactory();
		}

		return instance;
	}

	public static SimpleFactory getInstance() {
		if (instance == null) {
			instance = new SimpleFactory();
		}

		return instance;
	}

	public static Product create() {
		System.out.println(&quot;Factory is creating Product ...&quot;);
		Product product = new Product();

		return product;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We have a &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; object of type &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleFactory&lt;/code&gt;, and it is not available to the outside of the class, we also set the constructor of &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleFactory&lt;/code&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; too, so the caller can NOT invoke it directly, the only way we can get an instance if by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleFactory.instance()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleFactory.getInstance()&lt;/code&gt;, then we can invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;instance.create()&lt;/code&gt; to produce objects.&lt;/p&gt;

&lt;p&gt;Let’s define a class &lt;code class=&quot;highlighter-rouge&quot;&gt;Producer&lt;/code&gt; to use this &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleFactory&lt;/code&gt;, it is just like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Producer {
	public static void main(String[] args) {
		Product p = SimpleFactory.create();
		System.out.println(&quot;A product called '&quot; + p.getName() + &quot;' has been created.&quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the output of this class in my console:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Factory is creating Product ...
Product is created.
A product called 'Super Product' has been created.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see that, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Producer&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; is divided, standalone and has no interactions at all. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Producer&lt;/code&gt; acquires an object &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleFactory&lt;/code&gt; and does not care how the product is produced. Apparently, we have reduced the coupling of producing an object.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Factory Pattern&lt;/code&gt; can produce single type of product very well, but when we need to add many other types of product, what are we going to do? Creating more SimpleFactory with a type of product? Adding more types of product in the single one &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleFactory&lt;/code&gt;? Both are OK. This question brings another pattern of &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory&lt;/code&gt;, it is called &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory Methods&lt;/code&gt;:&lt;/p&gt;

&lt;h3 id=&quot;factory-methods-pattern&quot;&gt;2.2. Factory Methods Pattern&lt;/h3&gt;

&lt;p&gt;When we produce only one simple product, the pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Factory&lt;/code&gt; is well enough for us. when we need to add some more products, we need another pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory Methods Pattern&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, what is different between &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple Factory&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory Methods&lt;/code&gt;? It is simple, &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleFactory&lt;/code&gt; pattern is good at the condition of single one product, &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory Methods&lt;/code&gt; pattern is good at handling more than one products in the same type.&lt;/p&gt;

&lt;p&gt;Though we need to support different sub-types of product, we need different factories to do the job. We hope all the factories have the same method for producer to invoke, so we can define factory methods with an interface in this way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * @author &amp;lt;a href=&quot;mailto:acttosma@gmail.com&quot;&amp;gt;Acttos&amp;lt;/a&amp;gt;
 * @version 1.0.0
 */
public interface IMethodFactory {
	public Product create();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We have an interface class with a method &lt;code class=&quot;highlighter-rouge&quot;&gt;create()&lt;/code&gt; in it. All the factories implemented the interface must contain &lt;code class=&quot;highlighter-rouge&quot;&gt;create()&lt;/code&gt;, so the producer can just invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;create()&lt;/code&gt; without worries.&lt;/p&gt;

&lt;p&gt;Now, let’s write down two classes which implemented the interface :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MethodFactoryBeijingImpl&lt;/code&gt; represents Beijing factory who only produces &lt;code class=&quot;highlighter-rouge&quot;&gt;BeijingProduct&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * @author &amp;lt;a href=&quot;mailto:acttosma@gmail.com&quot;&amp;gt;Acttos&amp;lt;/a&amp;gt;
 * @version 1.0.0
 */
public class MethodFactoryBeijingImpl implements IMethodFactory {

	@Override
	public Product create() {
		System.out.println(&quot;Beijing factory is creating a product ...&quot;);

		Product product = new BeijingProduct();

		return product;
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MethodFactoryShanghaiImpl&lt;/code&gt; represents Shanghai factory who only produces &lt;code class=&quot;highlighter-rouge&quot;&gt;ShanghaiProduct&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * @author &amp;lt;a href=&quot;mailto:acttosma@gmail.com&quot;&amp;gt;Acttos&amp;lt;/a&amp;gt;
 * @version 1.0.0
 */
public class MethodFactoryShanghaiImpl implements IMethodFactory {

	@Override
	public Product create() {
		System.out.println(&quot;Shanghai factory is creating a product ...&quot;);

		Product product = new ShanghaiProduct();

		return product;
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Both of &lt;code class=&quot;highlighter-rouge&quot;&gt;BeijingProduct&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ShanghaiProduct&lt;/code&gt; are sub-type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;, they all are the same type.&lt;/p&gt;

&lt;p&gt;We can see the Beijing factory and Shanghai factory have different implementations of &lt;code class=&quot;highlighter-rouge&quot;&gt;create()&lt;/code&gt;, each factory creates product with specified type.&lt;/p&gt;

&lt;p&gt;Now, let’s check this codes out by creating a class &lt;code class=&quot;highlighter-rouge&quot;&gt;Producer&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * @author &amp;lt;a href=&quot;mailto:acttosma@gmail.com&quot;&amp;gt;Acttos&amp;lt;/a&amp;gt;
 * @version 1.0.0
 */
public class Producer {

	/**
	 * We receive an implement of IMethodFactory to do the producing.
	 * @param factory the implement of IMethodFactory which does nothing but defining.
	 * @return a product created by the give factory.
	 */
	public static Product create(IMethodFactory factory) {
		Product product = factory.create();

		return product;
	}

	public static void main(String[] args) {
		/**
		 * These lines below are a directly invoking of the implements of the interface.
		 */
		System.out.println(&quot;These lines below are a directly invoking of the implements of the interface.&quot;
				+ &quot;\n================================================================================\n&quot;);
		IMethodFactory beijingFactory = new MethodFactoryBeijingImpl();
		Product beijingP = beijingFactory.create();

		System.out.println(&quot;A product called '&quot; + beijingP.getName() + &quot;' has been created.\n&quot;);

		IMethodFactory shanghaiFactory = new MethodFactoryShanghaiImpl();
		Product shanghaiP = shanghaiFactory.create();

		System.out.println(&quot;A product called '&quot; + shanghaiP.getName() + &quot;' has been created.\n&quot;);

		/**
		 * These lines below create a product with the given implement of IMethodFactory.
		 */
		System.out.println(&quot;These lines below create a product with the given implement of IMethodFactory.&quot;
				+ &quot;\n================================================================================\n&quot;);
//		Product product = Producer.create(beijingFactory);//Uncomment this line to verify the beijingFactory
		Product product = Producer.create(shanghaiFactory);

		System.out.println(&quot;A product called '&quot; + product.getName() + &quot;' has been created.\n&quot;);

	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the output in my console, you can type the codes yourself and check the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;These lines below are a directly invoking of the implements of the interface.
================================================================================

Beijing factory is creating a product ...
Product is created.
BeijingProduct is created at Beijing.
A product called 'BeijingProduct' has been created.

Shanghai factory is creating a product ...
Product is created.
ShanghaiProduct is created at Shanghai.
A product called 'ShanghaiProduct' has been created.

These lines below create a product with the given implement of IMethodFactory.
================================================================================

Shanghai factory is creating a product ...
Product is created.
ShanghaiProduct is created at Shanghai.
A product called 'ShanghaiProduct' has been created.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory Methods Pattern&lt;/code&gt; is designed to handle multiple products of a single type with multiple factories, each sub-factory produces a specified product. But, what are we going to do when we need produce more than one type of product? such as &lt;code class=&quot;highlighter-rouge&quot;&gt;InternalProduct&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AbroadProduct&lt;/code&gt;? they are with different type, how to handle this?&lt;/p&gt;

&lt;h3 id=&quot;abstract-factory-pattern&quot;&gt;2.3. Abstract Factory Pattern&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory Methods Pattern&lt;/code&gt; is for producing multiple sub-types products with one single type. when we want to produce multiple types of product, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;Abstract Factory Pattern&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;Abstract Factory Pattern&lt;/code&gt;, the factory can produce more than one type of product, so we define a &lt;code class=&quot;highlighter-rouge&quot;&gt;abstract class&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractFactory&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * The creator of product, the 'createProduct..' methods count is the same as the type of product
 * @author &amp;lt;a href=&quot;mailto:acttosma@gmail.com&quot;&amp;gt;Acttos&amp;lt;/a&amp;gt;
 * @version 1.0.0
 */
 public abstract class AbstractFactory {
 	/**
 	 * Define a method to produce ProductA.
 	 * @return an instance of AbstractProductA.
 	 */
 	public abstract AbstractProductA createProductA();
 	/**
 	 * Define a method to produce ProductB.
 	 * @return an instance of AbstractProductB.
 	 */
 	public abstract AbstractProductB createProductB();
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this class, we have two methods &lt;code class=&quot;highlighter-rouge&quot;&gt;createProductA()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;createProductB&lt;/code&gt; which is made to produce &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductA&lt;/code&gt; and `ProductB.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;Abstract Factory Pattern&lt;/code&gt;, we can produce different types of product. &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductA&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductB&lt;/code&gt; are different types of product. so we defined two methods to do the job.&lt;/p&gt;

&lt;p&gt;Now, let’s implement this class `AbstractFactory, here we go:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AbroadProductFactory&lt;/code&gt; implements &lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractFactory&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * Only produces abroad products
 * @author &amp;lt;a href=&quot;mailto:acttosma@gmail.com&quot;&amp;gt;Acttos&amp;lt;/a&amp;gt;
 * @version 1.0.0
 */
public class AbroadProductFactory extends AbstractFactory {

	@Override
	public AbstractProductA createProductA() {
		return new AbroadProductA();
	}

	@Override
	public AbstractProductB createProductB() {
		return new AbroadProductB();
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here we define class &lt;code class=&quot;highlighter-rouge&quot;&gt;AbroadProductFactory&lt;/code&gt; for abroad products, we can just define a class &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductAFactory&lt;/code&gt; only produce &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductA&lt;/code&gt;, that is under &lt;code class=&quot;highlighter-rouge&quot;&gt;Abstract Factory Pattern&lt;/code&gt; too. Here we produce two types of product to make it a little complex to help us to understand the pattern.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InternalProductFactory&lt;/code&gt; implements &lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractFactory&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * Only produces internal products
 * @author &amp;lt;a href=&quot;mailto:acttosma@gmail.com&quot;&amp;gt;Acttos&amp;lt;/a&amp;gt;
 * @version 1.0.0
 */
public class InternalProductFactory extends AbstractFactory {

	@Override
	public AbstractProductA createProductA() {
		return new InternalProductA();
	}

	@Override
	public AbstractProductB createProductB() {
		return new InternalProductB();
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We have two factories for the producing, now, let’s check the result in a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;Producer&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * Here is a demo class shows how to use 'Design Pattern Abstract Factory'.
 * Commonly, we define two products and two types, and one Abstract Factory
 * with the same count methods of products.
 * @author &amp;lt;a href=&quot;mailto:acttosma@gmail.com&quot;&amp;gt;Acttos&amp;lt;/a&amp;gt;
 * @version 1.0.0
 */
public class Producer {
	@SuppressWarnings(&quot;unused&quot;)
	public static void main(String[] args) {
		/**
		 * Here we define two factories for 'Abroad' and 'Internal' products
		 */
		AbstractFactory abroadProductFactory = new AbroadProductFactory();
		AbstractFactory internalProductFactory = new InternalProductFactory();

		/**
		 * Here we define two 'ProductA' with 'Abroad' and 'Internal'
		 */
		AbstractProductA abstractAbroadProductA = abroadProductFactory.createProductA();
		AbstractProductA abstractInternalProductA = internalProductFactory.createProductA();

		/**
		 * Here we define two 'ProductB' with 'Abroad' and 'Internal'
		 */
		AbstractProductB abstractAbroadProductB = abroadProductFactory.createProductB();
		AbstractProductB abstractInternalProductB = internalProductFactory.createProductB();

		/**
		 * Here we can do anything we want.
		 */
		System.out.println(abroadProductFactory);
		System.out.println(internalProductFactory);

		System.out.println(abstractAbroadProductA);
		System.out.println(abstractInternalProductA);

		System.out.println(abstractAbroadProductB);
		System.out.println(abstractInternalProductB);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the class’ main method, we just print out the class name and the addresses in memory, we can do much more with the products in specified requirements.&lt;/p&gt;

&lt;p&gt;Here is the output in my console:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.acttos.pattern.factory.abstrakt.AbroadProductFactory@7852e922
org.acttos.pattern.factory.abstrakt.InternalProductFactory@4e25154f
org.acttos.pattern.factory.AbroadProductA@70dea4e
org.acttos.pattern.factory.InternalProductA@5c647e05
org.acttos.pattern.factory.AbroadProductB@33909752
org.acttos.pattern.factory.InternalProductB@55f96302
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can practice with the codes above to understand &lt;code class=&quot;highlighter-rouge&quot;&gt;Abstract Factory Pattern&lt;/code&gt; deeply.&lt;/p&gt;

&lt;p&gt;PS: The codes above are just apart of the whole project, you can imagine the last part by yourself or you can visit &lt;a href=&quot;https://github.com/acttos/&quot; target=&quot;_blank&quot;&gt;My Git&lt;/a&gt; to clone the whole project (Design Pattern) to verify.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;3. Conclusion&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Pattern Name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Scenarios&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Simple Factory&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Produces simple products, does not support multiple types of products, when need to add a new type of product, you need to add new factory class.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Factory Methods&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Produces products in a single type. Supports sub-type of products with sub-class of super-class of product, does not support to add new types of product.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Abstract Factory&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Produces multiple types of product, each type of product needs a method in the factory class, does not support to add new product.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Design Pattern is very useful to manage the code struct in our projects, a well formatted code struct can bring happiness while coding, less communications, more comfortable feelings.&lt;/p&gt;

&lt;p&gt;I was plan to write codes about &lt;code class=&quot;highlighter-rouge&quot;&gt;Design Pattern&lt;/code&gt; in &lt;a href=&quot;https://github.com/acttos/&quot; target=&quot;_blank&quot;&gt;My Git&lt;/a&gt;, welcome to be a part of &lt;a href=&quot;https://github.com/acttos/DesignPattern&quot; target=&quot;_blank&quot;&gt;this project&lt;/a&gt; with me.&lt;/p&gt;

&lt;h2 id=&quot;thanks-for-visiting&quot;&gt;4.Thanks for visiting.&lt;/h2&gt;
</description>
        <pubDate>Tue, 18 Oct 2016 17:41:49 +0800</pubDate>
        <link>http://www.acttos.org/2016/10/Design-Pattern-Of-Factory/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/10/Design-Pattern-Of-Factory/</guid>
        
        
        <category>Design</category>
        
        <category>Pattern</category>
        
      </item>
    
      <item>
        <title>常用的几种设计模式</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;常用的几种设计模式&lt;/h2&gt;

&lt;h4 id=&quot;mvc&quot;&gt;详见下方思维导图，包括工厂模式，单例模式，装饰模式，门面模式，MVC模式，聚合和继承，接口编程。&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/images/201610-design-pattern/Design_Pattern_01.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/201610-design-pattern/Design_Pattern_01.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Oct 2016 21:30:19 +0800</pubDate>
        <link>http://www.acttos.org/2016/10/Design-Pattern/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/10/Design-Pattern/</guid>
        
        
        <category>Design</category>
        
        <category>Pattern</category>
        
      </item>
    
      <item>
        <title>Common usage of UIWebView</title>
        <description>&lt;h2 id=&quot;what-is-uiwebview&quot;&gt;1.What is UIWebView?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt; is a UI kit from UIKit. ^_^ We can show a web page in our apps without opening &lt;code class=&quot;highlighter-rouge&quot;&gt;Safari&lt;/code&gt; browser in iOS. Most of the apps do not need a web page to show the extra info, sometimes, we want to display some ADs, or we need to show a recommend product list or something else, and we may want to change the contents of the page without publishing a new version of app. Now, we need a web server in remote and an &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt; in our apps.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-uiwebview&quot;&gt;2.How to use UIWebView?&lt;/h2&gt;

&lt;p&gt;In iOS, we can just drag an &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object library&lt;/code&gt; in the right-bottom of Xcode. Drag an &lt;code class=&quot;highlighter-rouge&quot;&gt;IBOutlet&lt;/code&gt; from the storyboard or xib to the controller. That is simple and clear, I will not spend much time on introducing it. Now let’s meet the real magic part of &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt;: The UIWebView Methods and The Delegate Methods.&lt;/p&gt;

&lt;h2 id=&quot;functioning-methods-and-delegate-methods-of-uiwebview&quot;&gt;3.Functioning Methods and Delegate Methods of UIWebView&lt;/h2&gt;

&lt;h3 id=&quot;functioning-methods-of-uiwebview&quot;&gt;3.1 Functioning Methods of UIWebView&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * UIWebView will load a request with this method,
 * we need initialize an URLRequest instance first
 */
open func loadRequest(_ request: URLRequest);

/**
 * UIWebView can load a local html content with
 * this method, it is safer than loadRequest from a server.
 */
open func loadHTMLString(_ string: String, baseURL: URL?);

/**
 * This method can load a Data instance such
 * HTML,JPEG,PNG and some other file types, the
 * mimeType should identify the type.
 */
open func load(_ data: Data, mimeType MIMEType: String, textEncodingName: String, baseURL: URL);

/** Using this method to reload the content of the UIWebView */
open func reload();

/** Using this method to stop current loading action. */
open func stopLoading();

/** Make the UIWebView go back if it can */
open func goBack();

/** Make the UIWebView go forward if it can. */
open func goForward();

/** A value tells whether the UIWebView can go back */
open var canGoBack: Bool { get };

/** A value tells whether the UIWebView can go forward */
open var canGoForward: Bool { get };

/** A value tells whether the UIWebView is loading a content */
open var isLoading: Bool { get };

/**
 * This method can acquire the string value of the content
 * of UIWebView by evaluating the given JavaScript string
 */
open func stringByEvaluatingJavaScript(from script: String) -&amp;gt; String?;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;delegate-methods-of-uiwebview&quot;&gt;3.2 Delegate Methods of UIWebView&lt;/h3&gt;

&lt;p&gt;Now let’s see what are included in UIWebView’s delegate methods.&lt;/p&gt;

&lt;p&gt;All the delegate methods of &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt; is defined in class &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebViewDelegate&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public protocol UIWebViewDelegate : NSObjectProtocol {

    /**
     * Sent before a web view begins loading a frame.
     * @param webView
     * The web view that is about to load a new frame.
     * @param request
     * The content location.
     * @param navigationType
     * The type of user action that started the load request.
     *
     * @returns true if the web view should begin loading content; otherwise, false .
    */
    @available(iOS 2.0, *)
    optional public func webView(_ webView: UIWebView, shouldStartLoadWith request: URLRequest, navigationType: UIWebViewNavigationType) -&amp;gt; Bool
    /**
     * Sent after a web view starts loading a frame.
     * @param webView
     * The web view that has begun loading a new frame.
    */
    @available(iOS 2.0, *)
    optional public func webViewDidStartLoad(_ webView: UIWebView)
    /**
     * Sent after a web view finishes loading a frame.
     * @param webView
     * The web view has finished loading.
    */
    @available(iOS 2.0, *)
    optional public func webViewDidFinishLoad(_ webView: UIWebView)
    /**
     * Sent if a web view failed to load a frame.
     * @param webView
     * The web view that failed to load a frame.
     * @param error
     * The error that occurred during loading.
    */
    @available(iOS 2.0, *)
    optional public func webView(_ webView: UIWebView, didFailLoadWithError error: Error)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It is shown what the delegate methods do. There is no more to explain.&lt;/p&gt;

&lt;p&gt;Using the delegate methods, we can do most of the actions of a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-demo-project-of-using-uiwebview&quot;&gt;4.A demo project of using UIWebView&lt;/h2&gt;

&lt;p&gt;Here is a demo of using &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt;, please &lt;a href=&quot;https://github.com/acttos/Swift-Acttos/tree/master/WebView&quot; target=&quot;_blank&quot;&gt;click here.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Oct 2016 19:10:39 +0800</pubDate>
        <link>http://www.acttos.org/2016/10/Common-Usage-Of-UIWebView/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/10/Common-Usage-Of-UIWebView/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Using UICollectionView Step by Step</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Summary: &lt;br /&gt;&lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt; allows us to display more than one cell in the same line which is not allowed in &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;. We can design Apps such as &lt;em&gt;Photo Gallery&lt;/em&gt;, &lt;em&gt;Video Wall&lt;/em&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt;. We will create a target &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionView&lt;/code&gt; in &lt;a href=&quot;https://github.com/acttos/Swift-Acttos&quot;&gt;Swift-Acttos&lt;/a&gt; step by step. Keeping the main usages of &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt; in mind is OK, no one can remember all the features of a thing, not just &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;let-us-just-begin-to-build-this-target-collectionview&quot;&gt;Let us just begin to build this target CollectionView:&lt;/h2&gt;

&lt;h3 id=&quot;create-a-target&quot;&gt;1. Create a target&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Click the plus button to add a target ‘CollectionView’&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/000.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Choose Single View Application&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/001.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fill in the blanks with values you want&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/002.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After all these steps above, we have a new target &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionView&lt;/code&gt; with &lt;em&gt;Code Structure&lt;/em&gt; looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/003.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;drag-a-collection-view-to-the-storyboard&quot;&gt;2. Drag a Collection View to the Storyboard&lt;/h3&gt;

&lt;p&gt;Let’s select &lt;em&gt;Main.stroyboard&lt;/em&gt; in the left navigator. We will see a blank Scene in the main window.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;View Controller Scene&lt;/em&gt; we drag a &lt;em&gt;Collection View&lt;/em&gt; to the Document Outline and just under &lt;em&gt;View&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Collection View in the Object library:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/0031.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The hierarchy of Views in the scene:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/0032.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-the-constraints&quot;&gt;3. Set the constraints&lt;/h3&gt;

&lt;p&gt;We need to add some constraints to make the page beautiful.
Do &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + Drag&lt;/code&gt; from &lt;em&gt;Collection View&lt;/em&gt; to &lt;em&gt;View&lt;/em&gt;, with &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift + Option&lt;/code&gt; we add four constraints at once:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/004.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then you get a &lt;em&gt;View Controller Scene&lt;/em&gt; with a UICollectionView in it.
And the values of constraints are all zeros:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/005.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s modify the &lt;em&gt;Collection View Cell&lt;/em&gt; by adding an UIImageView with a picture ‘wechat.png’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/wechat.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The constraints of the &lt;em&gt;UIImageView&lt;/em&gt; and the &lt;em&gt;Collection View Cell&lt;/em&gt; is like the &lt;em&gt;View&lt;/em&gt; and &lt;em&gt;Collection View&lt;/em&gt;, all the values are 0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/0033.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The scene now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/0034.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;adjust-the-inner-layout-of-collection-view&quot;&gt;4. Adjust the inner-layout of Collection View&lt;/h3&gt;

&lt;p&gt;Now let’s modify the inner-layout of &lt;em&gt;Collection View&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Select &lt;em&gt;Collection View&lt;/em&gt; in the &lt;em&gt;Document Outline&lt;/em&gt; and modify the layout in &lt;em&gt;Size Inspector&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/0035.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;After all those steps above, we finally get a &lt;em&gt;UICollectionView&lt;/em&gt; in &lt;em&gt;Main.storyboard&lt;/em&gt;. The effective way of developing an App is &lt;strong&gt;Design the user interface first, then write the codes&lt;/strong&gt;. So, we make the user interface first and write codes later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now, if you run &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD + R&lt;/code&gt; to see the face of your App, you probably will get a Black page on the screen. we will discuss about it later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;define-a-class-for-collection-view-cell-if-needed&quot;&gt;5. Define a class for Collection View Cell if needed&lt;/h3&gt;

&lt;p&gt;If you want to control the appearance of the cell dynamically, you’d better define a class for the cell in the storyboard.&lt;/p&gt;

&lt;p&gt;Just click &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD + N&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Cocoa Touch Class&lt;/code&gt; to open the guide of creating new file, give a name you want, choose a place to put the class file, and then you may get this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/0036.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Don’t forget to change the class type of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection View Cell&lt;/code&gt; in the Scene and set the ReuseIdentifier as &lt;em&gt;CollectionViewCell&lt;/em&gt; in the &lt;em&gt;Attributes Inspector&lt;/em&gt;. Here is my settings:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Class type:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/0037.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ReuseIdentifier:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/00371.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may want to modify the appearance of the cell, here is just a ImageView, let’s drag a link between the storyboard and the class file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/0038.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At last, we set the DataSource and Delegate of CollectionView by dragging a link through InterfaceBuilder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-uicollection-view/00381.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do the link again to the &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; in the &lt;em&gt;Connections Inspector&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;now-lets-do-the-coding-part-of-collectionview&quot;&gt;6. Now let’s do the coding part of CollectionView&lt;/h3&gt;

&lt;p&gt;First of all, we let &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; implement the Protocol of &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDelegate&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You may get an error &lt;code class=&quot;highlighter-rouge&quot;&gt;Type 'ViewController' does not conform to protocol 'UICollectionViewDataSource'&lt;/code&gt;, that is because we have not implemented the methods in &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; yet, don’t worry, we will add them later.&lt;/p&gt;

&lt;h4 id=&quot;the-datasource-methods-of-collectionview&quot;&gt;6.1 The DataSource methods of CollectionView&lt;/h4&gt;

&lt;p&gt;The DataSource methods define the number of sections, the number of cells and the cell of a &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt;, so we need to implement these methods to tell iOS how to handle our &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//MARK: - DataSource Methods of UICollectionView
func numberOfSectionsInCollectionView(collectionView: UICollectionView) -&amp;gt; Int {
    return 3;
}

func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&amp;gt; Int {
    return 7;
}

func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&amp;gt; UICollectionViewCell {
    let cell: CollectionViewCell = collectionView.dequeueReusableCellWithReuseIdentifier(&quot;CollectionViewCell&quot;, forIndexPath: indexPath) as! CollectionViewCell;

    if (indexPath.section % 2 == 0) {
        cell.backgroundImageView.image = UIImage.init(data: NSData(contentsOfURL: NSURL(string: &quot;https://avatars2.githubusercontent.com/u/6056509?v=3&amp;amp;s=460&quot;)!)!);
    } else {
        cell.backgroundImageView.image = UIImage(named: &quot;wechat.png&quot;);
    }

    return cell;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Don’t forget to set the &lt;em&gt;Collection Resuable View’s Identifier&lt;/em&gt; as &lt;em&gt;CollectionViewCell&lt;/em&gt;, just the same as the ReuseIdentifier in &lt;code class=&quot;highlighter-rouge&quot;&gt;func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That is enough for now, you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD + R&lt;/code&gt; to check the result.&lt;/p&gt;

&lt;h4 id=&quot;the-delegate-methods-of-collectionview&quot;&gt;6.2 The Delegate methods of CollectionView&lt;/h4&gt;

&lt;p&gt;The delegate methods define the actions of &lt;em&gt;UICollectionView&lt;/em&gt;, there are more than one method in the Delegate protocol. we just implement some of them to show the usage, you can try the else yourself to test more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is the delege methods in this target:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//MARK: - Delegate Methods of UICollectionView
func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {
    NSLog(&quot;The cell at section : \(indexPath.section), row : \(indexPath.row) has been clicked....&quot;);
}

func collectionView(collectionView: UICollectionView, didHighlightItemAtIndexPath indexPath: NSIndexPath) {
    let cell: CollectionViewCell = collectionView.cellForItemAtIndexPath(indexPath) as! CollectionViewCell;
    let frame: CGRect = cell.backgroundImageView.frame;
    cell.backgroundImageView.frame = CGRectMake(frame.origin.x + 4, frame.origin.y + 4, frame.size.width - 8, frame.size.height - 8);
}

func collectionView(collectionView: UICollectionView, didUnhighlightItemAtIndexPath indexPath: NSIndexPath) {
    let cell: CollectionViewCell = collectionView.cellForItemAtIndexPath(indexPath) as! CollectionViewCell;
    let frame: CGRect = cell.backgroundImageView.frame;
    cell.backgroundImageView.frame = CGRectMake(frame.origin.x - 4, frame.origin.y - 4, frame.size.width + 8, frame.size.height + 8);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When you click on the cell in the CollectionView, you’ll get a zooming animation and an output in console:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-09-08 19:59:45.204 CollectionView[50014:2032904] The cell at section : 0, row : 5 has been clicked....
2016-09-08 19:59:46.418 CollectionView[50014:2032904] The cell at section : 0, row : 5 has been clicked....
2016-09-08 19:59:46.830 CollectionView[50014:2032904] The cell at section : 0, row : 5 has been clicked....
2016-09-08 19:59:47.709 CollectionView[50014:2032904] The cell at section : 0, row : 5 has been clicked....
2016-09-08 19:59:48.343 CollectionView[50014:2032904] The cell at section : 0, row : 5 has been clicked....
2016-09-08 19:59:48.823 CollectionView[50014:2032904] The cell at section : 0, row : 5 has been clicked....
2016-09-08 19:59:49.064 CollectionView[50014:2032904] The cell at section : 0, row : 5 has been clicked....
2016-09-08 19:59:49.278 CollectionView[50014:2032904] The cell at section : 0, row : 5 has been clicked....
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;epilogue&quot;&gt;7. Epilogue&lt;/h3&gt;

&lt;p&gt;Until now, there must be a clear known about the usages of UICollectionView. you can write codes by yourself to verify the content of this article. You will find some mistakes maybe, please let me know if you do.&lt;/p&gt;

&lt;h3 id=&quot;thanks-for-visiting&quot;&gt;Thanks for visiting!&lt;/h3&gt;
</description>
        <pubDate>Thu, 08 Sep 2016 20:11:19 +0800</pubDate>
        <link>http://www.acttos.org/2016/09/UICollectionView/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/09/UICollectionView/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>The code structures in projects</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Summary:&lt;br /&gt;For years, I was working with many old projects handed over from previous coders. Most of the time, I feel upset very much at some of them which have badly designed code structures. I do NOT like it and I want to make a change. That is why this article comes out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;goals-of-code-structures&quot;&gt;1. Goals of code structures&lt;/h2&gt;

&lt;p&gt;I believe every programmer prefers a clear, simple and scalable code structure in the project. A good design of structure is a good start of a project, it can bring very fast coding, searching, refactoring and can also bring a pleasant feeling of breath which I think is very important while coding.&lt;/p&gt;

&lt;h4 id=&quot;team-work&quot;&gt;1.1. Team Work&lt;/h4&gt;

&lt;p&gt;Most of us are not working alone. We have colleagues or co-workers doing the coding job. If we write codes independently without enough communication or there is not so much of time while codeing, the good design of code structures is the key of collaboration. Based on the same code structure, everyone is coding inside the part of himself, and it provides well designed interfaces among parts of others’.&lt;/p&gt;

&lt;h4 id=&quot;codes-handover&quot;&gt;1.2. Codes Handover&lt;/h4&gt;

&lt;p&gt;We can’t be sure that we will work at the same palce or do jobs with only one project, and we also will take over projects from former coders. A well designed code structure here is strongly needed, otherwise, we will need much more time dealing with reading and understanding the codes, and with good understanding of codes, there might come with modifying and even refactoring next.&lt;/p&gt;

&lt;h4 id=&quot;maintenance&quot;&gt;1.3. Maintenance&lt;/h4&gt;

&lt;p&gt;On special condition, you are always at the same place with the same job, but what about the time? You can’t stop time, your codes will be changed or added and finally become a thing of the past, one day you need to locate an old postion to handle an issue possibly caused by some of the codes you wrote before, do you need a well designed code structure? Ofcourse you do.&lt;/p&gt;

&lt;h2 id=&quot;frequently-used-designs&quot;&gt;2. Frequently used designs&lt;/h2&gt;
&lt;p&gt;I can’t say I am so good at code structures designing, I only have some real practises which I think can give some ideas. I know there are so many ways to design the structure, I am not able to figure all of them out. Please allow me show you the three frequently used designs below:&lt;/p&gt;

&lt;h4 id=&quot;kiss&quot;&gt;2.1. K.I.S.S&lt;/h4&gt;

&lt;p&gt;I always belive and insist that &lt;code class=&quot;highlighter-rouge&quot;&gt;The simpler your code is, the easier you job will be&lt;/code&gt;. No one want to put himself into a complicated situation. So, remember to keep every thing simple, the simpler the better.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;K.I.S.S&lt;/code&gt; means &lt;code class=&quot;highlighter-rouge&quot;&gt;Keep it simple, stupid&lt;/code&gt;, the word &lt;code class=&quot;highlighter-rouge&quot;&gt;stupid&lt;/code&gt; here does not mean &lt;code class=&quot;highlighter-rouge&quot;&gt;Write codes stupidly&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stupid&lt;/code&gt; is the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;simple&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;K.I.S.S&lt;/code&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;simple&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;stupid&lt;/code&gt; to tell us how to write codes which can be maintained easily.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is a example of Objective-C to fill an user info:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark - Private Methods for only Self-using
-(void)_fillViewWithUserInfo:(SPUserInfo *)userInfo {
    UIImage *iconImage = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:userInfo.portraitURL]]];
    self.userIconBackgroundImageView.image = iconImage;
    self.userIconImageView.image = iconImage;
    self.userNicknameLabel.text = userInfo.nickName;
    self.userIdLabel.text = userInfo.userId;
    self.userIntroLabel.text = @&quot;&quot;;
    self.userFunCountLabel.text = [NSString stringWithFormat:@&quot;%ld&quot;,userInfo.fansNum];
    self.userFocusCountLabel.text = [NSString stringWithFormat:@&quot;%ld&quot;,userInfo.subsNum];
    self.userStarTicketCountLabel.text = [NSString stringWithFormat:@&quot;%ld&quot;,userInfo.totalStarTickets];
    self.userIncomeCountNumberLabel.text = [NSString stringWithFormat:@&quot;%f&quot;,userInfo.userIncome];
    self.userStarBeanCountNumberLabel.text = [NSString stringWithFormat:@&quot;%ld&quot;,userInfo.userStarCoins];

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The method above fills an user info, and it is the only thing it does. &lt;code class=&quot;highlighter-rouge&quot;&gt;Simple&lt;/code&gt; does not mean there is less lines of codes, it means &lt;code class=&quot;highlighter-rouge&quot;&gt;Very easy to understand and Designed for only one purpose&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s see more:
&lt;em&gt;Control method and sub-control methods&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// I am the control method for deciding route
-(void)_switchBroadcastingLeftItems {
    if (!self.isLeftItemsButtonShowing) {
        //Show them
        [self _showBroadcastingLeftItems];
    } else {
        //Hide them
        [self _hideBroadcastingLeftItems];
    }
}

// I am the sub-control method for showing thing
-(void)_showBroadcastingLeftItems {
	//Do the showing thing
}
// I am the sub-control method for hiding thing
-(void)_hideBroadcastingLeftItems {
	//Do the hiding thing
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I usually see someone writing the &lt;code class=&quot;highlighter-rouge&quot;&gt;showing&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hiding&lt;/code&gt; methods in only one statement. Ofcourse, that is OK, we can completely do lots of things in one place except we are willing to keep the code simple and clear.&lt;/p&gt;

&lt;h4 id=&quot;mvc--mvp&quot;&gt;2.2. MVC &amp;amp; MVP&lt;/h4&gt;

&lt;p&gt;We also want a clear structure in our project, I saw many projects with bad code hierarchy, you can feel it yourself:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A code hierarchy:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SAViewController
|____SAImagePicker
|____SACameraController
|____SADashboardController
| |____dashboardImage
| |____PremiumFeatures
|____SAFBLoginController
|____SAMediaController
|____SAMenuController
|____SAMessenger
| |____Chat
| |____Friend
|____SAPhotoBrowser
| |____CustomNavBar
| |____EGORefreshTable
| |____HPGrowingTextView
| |____MBProgressHUD
| |____Popover
| |____SAActivityIndicatorView
| |____SAAlertView
| |____SAEmojiKeyboard
| |____SALabel
| |____SALazyImageView
| |____SAProgressBar
| |____SASeparateView
| |____StyledPageControl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Why there are so many un-controller class folders under &lt;code class=&quot;highlighter-rouge&quot;&gt;SAViewController&lt;/code&gt;? Why there is a model &lt;code class=&quot;highlighter-rouge&quot;&gt;SAMessenger&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;SAViewController&lt;/code&gt;? I was totally lost in it the first time I saw it.&lt;/p&gt;

&lt;p&gt;In my opinion, we should place the same type of files in a folder, the same functioning of files in a folder, even the same type of language in a folder and so on.&lt;/p&gt;

&lt;p&gt;In one words:&lt;code class=&quot;highlighter-rouge&quot;&gt;We always put files which have something in common into a folder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is another example which places the file with a better designed hierarchy:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SAStore
|____Controller
| |____SAStoreViewController.h
| |____SAStoreViewController.m
| |____SAProductWebViewController.h
| |____SAProductWebViewController.m
|____Model
| |____SAStoreProduct.h
| |____SAStoreProduct.m
| |____SAStoreProductListResponse.h
| |____SAStoreProductListResponse.m
|____SAStore.storyboard
|____SAStore.xib
|____View
| |____NJKWebViewProgress
| | |____NJKWebViewProgress.h
| | |____NJKWebViewProgress.m
| | |____NJKWebViewProgressView.h
| | |____NJKWebViewProgressView.m
| |____SAProductCollectionViewCell.h
| |____SAProductCollectionViewCell.m
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Here is the code structure in Xcode:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-code-structure/sastore-mvc-structure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See? The later one fits my taste much more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, let’s see what is &lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;MVC&lt;/em&gt; means &lt;em&gt;Model,View,Controller&lt;/em&gt;, it is a design pattern of flow control or data control.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;MVC&lt;/em&gt; is used widely in J2EE projects, the source codes in the &lt;em&gt;Model&lt;/em&gt; layer response for the logic such as &lt;code class=&quot;highlighter-rouge&quot;&gt;database invoking,cached data handling&lt;/code&gt;, the source codes in &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; response for the logic of &lt;code class=&quot;highlighter-rouge&quot;&gt;business logic control&lt;/code&gt;, and the source codes in &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; response for the &lt;code class=&quot;highlighter-rouge&quot;&gt;user interface&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Role of Model, View, Controller:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Model &amp;lt;——&amp;gt; Handle most of the data logic in a system, such as database access, remote http invoking and so on.&lt;/li&gt;
  &lt;li&gt;View  &amp;lt;——&amp;gt; Handle the ‘User Interface’ thing in a system.&lt;/li&gt;
  &lt;li&gt;Controller &amp;lt;——&amp;gt; Control the business logic.
&lt;em&gt;Here is the invoking flow of MVC:&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-code-structure/mvc-invoke-flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The user can interactive in &lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt; through these two maps below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-code-structure/mvc-invoke-flow-with-user.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The left one shows up that the user interactives through the &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; layer, it may be seen in a web application such as &lt;em&gt;User Registration or Signing In&lt;/em&gt;. Most of this type requires the user to input some forms for the data to transfer and then the &lt;em&gt;Controller&lt;/em&gt; handles the business logic with the data, at last, the &lt;em&gt;Model&lt;/em&gt; gives the result to the &lt;em&gt;View&lt;/em&gt; and the user can get a result of inputs.&lt;/p&gt;

&lt;p&gt;The right one shows up that the user passes data directly to the &lt;em&gt;Controller&lt;/em&gt; layer, then, &lt;em&gt;Controller&lt;/em&gt; passes the request data to &lt;em&gt;Model&lt;/em&gt;, the &lt;em&gt;Model&lt;/em&gt; returns the result to &lt;em&gt;View&lt;/em&gt;. This kind of &lt;em&gt;MVC&lt;/em&gt; can be seen in Apps which linked with an App-Server. Most of the time, there is no input views for the user, the pages in the App can handle the request data as input key-value(s).&lt;/p&gt;

&lt;p&gt;There is another Design Partten called &lt;em&gt;MVP&lt;/em&gt; which is familiar to &lt;em&gt;MVC&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is the invoking flow of MVP:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201609-code-structure/mvp-invoke-flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;MVP&lt;/em&gt;, we can’t see the layer &lt;em&gt;Controller&lt;/em&gt;, instead of, we get &lt;em&gt;Presenter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The key difference between &lt;em&gt;MVP&lt;/em&gt; and &lt;em&gt;MVC&lt;/em&gt; is the data transmission. All the data must be handled by &lt;em&gt;Presenter&lt;/em&gt; in &lt;em&gt;MVP&lt;/em&gt;. &lt;em&gt;Presenter&lt;/em&gt; is the main door and only door of data.&lt;/p&gt;

&lt;p&gt;I prefer &lt;em&gt;MVP&lt;/em&gt; as my design partten, there is no reason, or it is much clearer.&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;3. Thanks&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Code Structure&lt;/em&gt; is very important in our developments, I hope and wish there is going to be a day that everyone follows the common design pattern to build our simple, effective, lovely coding life.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank &lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html&quot;&gt;RuanYifeng&lt;/a&gt; very much for the introduction and pictures of MVC and MVP&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Sep 2016 16:53:29 +0800</pubDate>
        <link>http://www.acttos.org/2016/09/Code-Structures/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/09/Code-Structures/</guid>
        
        
        <category>Structure</category>
        
      </item>
    
      <item>
        <title>Frequently Used Markdown Formats</title>
        <description>&lt;h1 id=&quot;markdown&quot;&gt;Markdown常用的格式&lt;/h1&gt;

&lt;p&gt;华丽的分割线：&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section&quot;&gt;标题演示&lt;/h1&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;section-1&quot;&gt;一级标题&lt;/h1&gt;

&lt;h1 id=&quot;section-2&quot;&gt;二级标题&lt;/h1&gt;

&lt;h3 id=&quot;section-3&quot;&gt;三级标题&lt;/h3&gt;

&lt;h4 id=&quot;section-4&quot;&gt;四级标题&lt;/h4&gt;

&lt;h5 id=&quot;section-5&quot;&gt;五级标题&lt;/h5&gt;

&lt;h6 id=&quot;section-6&quot;&gt;六级标题&lt;/h6&gt;

&lt;h1 id=&quot;section-7&quot;&gt;列表演示&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;section-8&quot;&gt;无序列表&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;文本1&lt;/li&gt;
  &lt;li&gt;文本2&lt;/li&gt;
  &lt;li&gt;文本3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-9&quot;&gt;有序列表&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;文本1&lt;/li&gt;
  &lt;li&gt;文本2&lt;/li&gt;
  &lt;li&gt;文本3&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-10&quot;&gt;链接和图片&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;section-11&quot;&gt;链接&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;, &lt;a href=&quot;http://www.nq.com&quot;&gt;NQ Mobile Inc.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;图片&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/11373732?v=3&amp;amp;s=200&quot; alt=&quot;&quot; /&gt;,&lt;img src=&quot;https://avatars1.githubusercontent.com/u/6056509?v=3&amp;amp;s=200&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-13&quot;&gt;引用文字&lt;/h1&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-14&quot;&gt;粗体和斜体&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;一盏灯&lt;/em&gt;， 一片昏黄；&lt;strong&gt;一简书&lt;/strong&gt;， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。&lt;/p&gt;

&lt;h1 id=&quot;section-15&quot;&gt;表格&lt;/h1&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;表格1&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tables&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Are&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Cool&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;col 3 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;right-aligned&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 2 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;centered&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zebra stripes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;are neat&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;表格2&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;dog&lt;/th&gt;
      &lt;th&gt;bird&lt;/th&gt;
      &lt;th&gt;cat&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;foo&lt;/td&gt;
      &lt;td&gt;foo&lt;/td&gt;
      &lt;td&gt;foo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bar&lt;/td&gt;
      &lt;td&gt;bar&lt;/td&gt;
      &lt;td&gt;bar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;baz&lt;/td&gt;
      &lt;td&gt;baz&lt;/td&gt;
      &lt;td&gt;baz&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;section-16&quot;&gt;显示链接中带括号的图片&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?\prod%20\(n_{i}\)+1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;source-code&quot;&gt;Source Code&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Markdown常用的格式

华丽的分割线：

---

# 标题演示
--- 

# 一级标题

# 二级标题

### 三级标题

#### 四级标题

##### 五级标题

###### 六级标题


# 列表演示
---

## 无序列表

- 文本1
- 文本2
- 文本3

## 有序列表

1. 文本1
2. 文本2
3. 文本3

# 链接和图片
---

## 链接

[百度](http://www.baidu.com), [NQ Mobile Inc.](http://www.nq.com)

## 图片

![](https://avatars0.githubusercontent.com/u/11373732?v=3&amp;amp;s=200),![](https://avatars1.githubusercontent.com/u/6056509?v=3&amp;amp;s=200)

# 引用文字
---

&amp;gt; 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。

# 粗体和斜体
---

Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如：


*一盏灯*， 一片昏黄；**一简书**， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。

# 表格
---

- 表格1

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |

- 表格2

dog | bird | cat
----|------|----
foo | foo  | foo
bar | bar  | bar
baz | baz  | baz

# 显示链接中带括号的图片
---

![][1]

[1]: http://latex.codecogs.com/gif.latex?\prod%20\(n_{i}\)+1

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 25 Aug 2016 15:14:53 +0800</pubDate>
        <link>http://www.acttos.org/2016/08/Frequently-Used-Markdown-Formats/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/08/Frequently-Used-Markdown-Formats/</guid>
        
        
        <category>Markdown</category>
        
      </item>
    
      <item>
        <title>Acquire Microphone and Camera authorization</title>
        <description>&lt;h3 id=&quot;microphone-and-camera-in-iphone-devices&quot;&gt;1. Microphone and Camera in iPhone devices&lt;/h3&gt;

&lt;p&gt;Recently, we need to develop an app with video and sound in iOS.
It is the first time I have been play with AVFoundation Framework, so I surelly get some problems. I want to talk about one of them here to avoid the second time mistake.&lt;/p&gt;

&lt;p&gt;In iOS, we use Microphone to get the voice, use Camera to capture the pictures or videos. Also, we know iOS is a safer OS than any others in the market. Most of the Hardwares such as Microphone, Camera, Bluetooth, Accelerometer require an authorization to access, that is the way Apple protecting people’s privacy. So, we need to acquire a permission in our ‘Microphone and Camera app’.&lt;/p&gt;

&lt;h3 id=&quot;steps-for-acquiring-authorization&quot;&gt;2. Steps for acquiring authorization&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AVFoundation Framework&lt;/code&gt; is required for &lt;code class=&quot;highlighter-rouge&quot;&gt;Audio or Video&lt;/code&gt; development. So firt of all, we import AVFoundation Framework in our class, and here is the header of my class, it includes AVFoundation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit
import Foundation
import AVFoundation
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After that, we can use the classes in AVFoundation, and we can acquire authorizations we need.&lt;/p&gt;

&lt;p&gt;Let’s begin with a standalone function called &lt;code class=&quot;highlighter-rouge&quot;&gt;_requestForMediaAuthorization(type:String, callback:AuthorizeResultBlock)&lt;/code&gt;, here is the whole func:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func _requestForMediaAuthorization(type: String, callback:AuthorizeResultBlock) -&amp;gt; Void {
    AVCaptureDevice.requestAccessForMediaType(type) { (grant) in
        if (grant) {
            NSLog(&quot;Authorize sucessfully with type:\(type)&quot;);
            callback(succeed: true);
        } else {
            NSLog(&quot;Failed to get authorization with type:\(type)&quot;);
            callback(succeed: false);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We define a function has two parameters: We accept AVMediaType to decide which device authorization is required, and accept a closure to pass the result waiting for the receiver to handle.&lt;/p&gt;

&lt;p&gt;Here is the definition of the closure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typealias AuthorizeResultBlock = @convention(block) (succeed:Bool) -&amp;gt; Void;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The closure has only one parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;succeed&lt;/code&gt; to identify the result of accquiring a certain type authorization of device. If &lt;code class=&quot;highlighter-rouge&quot;&gt;succeed&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, it means we succefully acquired the authorization, otherwise failed.&lt;/p&gt;

&lt;p&gt;In function &lt;code class=&quot;highlighter-rouge&quot;&gt;_requestForMediaAuthorization(type:String, callback:AuthorizeResultBlock)&lt;/code&gt;, we use the following definition to do the real thing for acquiring:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class func requestAccessForMediaType(mediaType: String!, completionHandler handler: ((Bool) -&amp;gt; Void)!)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This function is a class function, which means we can directly call it with dot &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; appending with the class name. It is just like &lt;code class=&quot;highlighter-rouge&quot;&gt;AVCaptureDevice.requestAccessForMediaType(mediaType,completionBlock)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Basically that is the way we acquiring a permission. However, if we failed to do that, we still need to give a notice that why we can not continue.&lt;/p&gt;

&lt;h3 id=&quot;the-failure-notice-view&quot;&gt;3. The failure notice view&lt;/h3&gt;

&lt;p&gt;Here is the notice handler function with a notice view show up:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func _showAuthorizationFailureNotice(type: String) -&amp;gt; Void {
    dispatch_async(dispatch_get_main_queue()) {
        var tips: String?;
        let privacyItem: String = type == AVMediaTypeAudio ? &quot;MICROPHONE&quot; : type == AVMediaTypeVideo ? &quot;CAMERA&quot; : &quot;&quot;;

        self.settingsItemURL = NSURL(string: &quot;prefs:root=Privacy&amp;amp;path=\(privacyItem)&quot;);

        if (type == AVMediaTypeAudio) {
            tips = &quot;Please allow us to use your Microphone to capture audio by opening 'Settings -&amp;gt; Privacy -&amp;gt; Microphone' to grant.&quot;;
        } else if (type == AVMediaTypeVideo) {
            tips = &quot;Please allow us to use your Camera to capture video by opening 'Settings -&amp;gt; Privacy -&amp;gt; Camera' to grant.&quot;;
        } else {
            tips = &quot;Please allow us to use your device by opening 'Settings -&amp;gt; Privacy' to grant certain authorization.&quot;;
        }

        let compareResult:NSComparisonResult = UIDevice.currentDevice().systemVersion.compare(&quot;8.0&quot;);

        if (compareResult == NSComparisonResult.OrderedSame || compareResult == NSComparisonResult.OrderedDescending) {
            let alertController: UIAlertController = UIAlertController(title: &quot;Authorization Request&quot;, message: tips, preferredStyle: UIAlertControllerStyle.Alert);
            let confirmAction: UIAlertAction = UIAlertAction(title: &quot;OK&quot;, style: UIAlertActionStyle.Default, handler: { (action) in
                if(UIApplication.sharedApplication().canOpenURL(self.settingsItemURL!)) {
                    UIApplication.sharedApplication().openURL(self.settingsItemURL!);
                }
            });

            let cancelAction: UIAlertAction = UIAlertAction(title: &quot;Cancel&quot;, style: UIAlertActionStyle.Cancel, handler: nil);

            alertController.addAction(confirmAction);
            alertController.addAction(cancelAction);
            self.presentViewController(alertController, animated: true, completion: {

            });
        } else {
            let alertView: UIAlertView = UIAlertView(title: &quot;Authorization Request&quot;, message: tips!, delegate: self, cancelButtonTitle: &quot;Cancel&quot;, otherButtonTitles: &quot;OK&quot;);
            alertView.show();
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let’s go deeper into the codes above.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The Accquiring action is processed in the background thread by iOS, so if we want to display a failure notice view on the screen, we need to switch to the main thread.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;First line in the statement is a &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt; keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_async&lt;/code&gt;, with &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_main_queue()&lt;/code&gt; we move from the background thread to the main thread.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For the failure notice view, we simply set a message and a button for the user. We set the value of parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;tips&lt;/code&gt; on condition of the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, because different types of accquring bring us different way to handle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After we set the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;tips&lt;/code&gt;, we are ready to show it on the screen. And here we have two options:&lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertView&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertController&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertView&lt;/code&gt; is the common option for the alert notice view, but from iOS version 8.0, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertView&lt;/code&gt; is marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;Deprecated&lt;/code&gt;, so it is necessary to add &lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertController&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertAction&lt;/code&gt;s to adapt different version of iOS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For opening a certain settings page, &lt;a href=&quot;/2016/08/Open-A-Settings-Page-in-iOS/&quot; target=&quot;_blank&quot;&gt;here is a reference&lt;/a&gt;, you can find how to open a settings page.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertView&lt;/code&gt; needs a delegate to handle the button actions on it, so we write a simple function implementation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//MARK: - UIAlertView Delegate Methods
func alertView(alertView: UIAlertView, clickedButtonAtIndex buttonIndex: Int) {
    if (buttonIndex == 1) {
        if(UIApplication.sharedApplication().canOpenURL(settingsItemURL!)) {
            UIApplication.sharedApplication().openURL(settingsItemURL!);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;source-code&quot;&gt;4. Source code&lt;/h3&gt;

&lt;h5 id=&quot;you-can-find-the-source-code--here-httpsgithubcomacttosswift-acttostargetblank-and-you-are-welcomed-to-give-suggestions&quot;&gt;You can find the source code &lt;a href=&quot;https://github.com/acttos/Swift-Acttos&quot; target=&quot;_blank&quot;&gt;[ &lt;em&gt;Here&lt;/em&gt; ]&lt;/a&gt; and you are welcomed to give suggestions.&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;The codes may be updated from time to time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Aug 2016 21:34:23 +0800</pubDate>
        <link>http://www.acttos.org/2016/08/Acquire-Microphone-and-Camera-authorization/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/08/Acquire-Microphone-and-Camera-authorization/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>NSTimer and GCD Timer in iOS</title>
        <description>&lt;h3 id=&quot;how-to-use-nstimer-&quot;&gt;1. How to use NSTimer ?&lt;/h3&gt;

&lt;p&gt;NSTimer can schedule an event in a later time. The most common way is :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;class ViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        self._setupNSTimer();
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }

    func _setupNSTimer() -&amp;gt; Void {
        NSTimer.scheduledTimerWithTimeInterval(3, target: self, selector: #selector(_timerAction(_:)), userInfo: nil, repeats: true);
    }

    func _timerAction(timer: NSTimer) -&amp;gt; Void {
        NSLog(&quot;In '_timerAction(_:)': The timer is fired.&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This class method can return a NSTimer instance and schedule the event too. We set the timer with time interval 3, which means this timer will &lt;code class=&quot;highlighter-rouge&quot;&gt;fire every 3 seconds&lt;/code&gt;, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; of the timer is &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;, the action is &lt;code class=&quot;highlighter-rouge&quot;&gt;_timerAction(_:)&lt;/code&gt;, pay attention, this &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; here is required, method with pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;selectorName(param:)&lt;/code&gt; is called when the timer fires the event, the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt; here you can put some key-value pairs for the later use, the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;repeats&lt;/code&gt; with value &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; means the timer we scheduled is repeatable, the event of the timer will triggered repeatedly.&lt;/p&gt;

&lt;p&gt;As we say, we defined a method &lt;code class=&quot;highlighter-rouge&quot;&gt;_timerAction(timer:)&lt;/code&gt; to execute the logic when the timer event is triggered:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;func _timerAction(timer: NSTimer) -&amp;gt; Void {
    NSLog(&quot;In '_timerAction(_:)': The timer is fired.&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLog&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; because we want print the system time in the console, and we can know the precise time of the events.&lt;/p&gt;

&lt;p&gt;Now, let’s run to see what will happen:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-08-18 15:01:11.618 Timer[58520:1287697] In '_timerAction(_:)': The timer is fired.
2016-08-18 15:01:14.556 Timer[58520:1287697] In '_timerAction(_:)': The timer is fired.
2016-08-18 15:01:17.555 Timer[58520:1287697] In '_timerAction(_:)': The timer is fired.
2016-08-18 15:01:20.556 Timer[58520:1287697] In '_timerAction(_:)': The timer is fired.
2016-08-18 15:01:23.555 Timer[58520:1287697] In '_timerAction(_:)': The timer is fired.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As we expected, the timer works fine, it fires every 3 seconds.&lt;/p&gt;

&lt;h3 id=&quot;the-gcd-timer&quot;&gt;2. The GCD Timer&lt;/h3&gt;

&lt;p&gt;Most of the time, I use NSTimer for my scheduled events, and NSTimer seems to be the best option until I got an issue: The NSTimer does NOT work…&lt;/p&gt;

&lt;h4 id=&quot;why-nstimer-does-not-work-&quot;&gt;2.1. Why NSTimer does NOT work ?&lt;/h4&gt;

&lt;p&gt;Here is the thing, I want to set a NSTimer for a background thread to see how long the thread costs, unfortunately I did not get what I want. Now let’s see a familiar demo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;class ViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad();
        self._backgroundTimer();
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func _backgroundTimer() -&amp;gt; Void {
        NSLog(&quot;_backgroundTimer invoked.&quot;);
        /**
         *  The thread I used is a background thread, dispatch_async will set up a background thread to execute the code in the block.
         */
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {
            NSLog(&quot;NSTimer will be scheduled...&quot;);
            NSTimer.scheduledTimerWithTimeInterval(1, target: self, selector: #selector(self._backgroundTimerAction(_:)), userInfo: nil, repeats: true);
            NSLog(&quot;NSTimer scheduled...&quot;);
        }

    }

    func _backgroundTimerAction(timer: NSTimer) -&amp;gt; Void {
        NSLog(&quot;In '_backgroundTimerAction(_:)': The timer is fired.&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the console, we get this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-08-18 15:27:22.575 Timer[59305:1314553] _backgroundTimer invoked.
2016-08-18 15:27:22.579 Timer[59305:1314860] NSTimer will be scheduled...
2016-08-18 15:27:22.580 Timer[59305:1314860] NSTimer scheduled...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We will never see &lt;code class=&quot;highlighter-rouge&quot;&gt;In '_backgroundTimerAction(_:)': The timer is fired.&lt;/code&gt; printed.&lt;/p&gt;

&lt;p&gt;Why is that ?&lt;/p&gt;

&lt;p&gt;We checked the official document of Apple about NSTimer, we know NSTimer must run in a &lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoop&lt;/code&gt;, when the NSTimer is scheduled in the main thread, it will be added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Thread NSRunLoop&lt;/code&gt; automatically. But in other threads, we must get the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoop&lt;/code&gt; first and add the timer to it and run the current &lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoop&lt;/code&gt; …&lt;/p&gt;

&lt;p&gt;Let’s see the modified codes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;class ViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad();
        self._backgroundTimer();
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func _backgroundTimer() -&amp;gt; Void {
        NSLog(&quot;_backgroundTimer invoked.&quot;);
        /**
         *  The thread I used is a background thread, dispatch_async will set up a background thread to execute the code in the block.
         */
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {
            NSLog(&quot;NSTimer will be scheduled...&quot;);
            //Define a NSTimer
            let timer:NSTimer = NSTimer.scheduledTimerWithTimeInterval(1, target: self, selector: #selector(self._backgroundTimerAction(_:)), userInfo: nil, repeats: true);
            //Get the current RunLoop
            let runLoop:NSRunLoop = NSRunLoop.currentRunLoop();
            //Add the timer to the RunLoop
            runLoop.addTimer(timer, forMode: NSDefaultRunLoopMode);
            //Invoke the run method of RunLoop manually
            runLoop.run();
            NSLog(&quot;NSTimer scheduled...&quot;);
        }
    }

    func _backgroundTimerAction(timer: NSTimer) -&amp;gt; Void {
        NSLog(&quot;In '_backgroundTimerAction(_:)': The timer is fired.&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the console, we finally get what we want:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-08-18 15:51:16.343 Timer[60011:1337525] _backgroundTimer invoked.
2016-08-18 15:51:16.344 Timer[60011:1337800] NSTimer will be scheduled...
2016-08-18 15:51:17.344 Timer[60011:1337800] In '_backgroundTimerAction(_:)': The timer is fired.
2016-08-18 15:51:18.344 Timer[60011:1337800] In '_backgroundTimerAction(_:)': The timer is fired.
2016-08-18 15:51:19.344 Timer[60011:1337800] In '_backgroundTimerAction(_:)': The timer is fired.
2016-08-18 15:51:20.345 Timer[60011:1337800] In '_backgroundTimerAction(_:)': The timer is fired.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer scheduled...&lt;/code&gt; is not printed, why?
Because the code &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLog(&quot;NSTimer scheduled...&quot;);&lt;/code&gt; is invoked only after the NSRunLoop becomes disactive, when the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; is over, the codes under it will be invoked.&lt;/p&gt;

&lt;p&gt;We change the initialization of the timer as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;let timer:NSTimer = NSTimer.scheduledTimerWithTimeInterval(1, target: self, selector: #selector(self._backgroundTimerAction(_:)), userInfo: nil, repeats: false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And again, we check the console, we get this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-08-18 15:58:05.484 Timer[60228:1346311] _backgroundTimer invoked.
2016-08-18 15:58:05.486 Timer[60228:1346618] NSTimer will be scheduled...
2016-08-18 15:58:06.489 Timer[60228:1346618] In '_backgroundTimerAction(_:)': The timer is fired.
2016-08-18 15:58:06.489 Timer[60228:1346618] NSTimer scheduled...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;See? &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer scheduled...&lt;/code&gt; is printed.&lt;/p&gt;

&lt;p&gt;Although we get the right result, I still feel it is a little complicated and there is some hidden dangers in &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; needs one live &lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoop&lt;/code&gt; to execute it’s events. In main thread, the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoop&lt;/code&gt; is always live and will never stop until the app is terminated, but in other threads, you must invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt; to active the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoop&lt;/code&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; must invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate()&lt;/code&gt; to release the current timer, otherwise, the timer will retain a strong reference of the current instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;, and it will remain in memory until &lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate()&lt;/code&gt; invoked or app terminated;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; must created and invalidated in the same thread, and a lot of times, we may forget that.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And let’s find out what GCD Timer is.&lt;/p&gt;

&lt;h4 id=&quot;what-is-gcd-timer-and-how-to-use-it-&quot;&gt;2.2. What is GCD Timer and How to use it ?&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD Timer&lt;/code&gt; should be called &lt;code class=&quot;highlighter-rouge&quot;&gt;Timer in GCD&lt;/code&gt;, because &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD Timer&lt;/code&gt; is not existed, it only is a feature of GCD. Let’s look into a demo:&lt;/p&gt;

&lt;p&gt;First, let’s define two parameters &lt;em&gt;in class&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;let queue: dispatch_queue_t? = dispatch_queue_create(&quot;GCDTimerQueue&quot;, DISPATCH_QUEUE_CONCURRENT);//Define and initialize a dispatch_queue;
var timer: dispatch_source_t? = nil;//To be initialized later;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, let’s set up the function of &lt;code class=&quot;highlighter-rouge&quot;&gt;_timerInGCD(repeated:)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;    func _timerInGCD(repeated repeated:Bool) -&amp;gt; Void {
        NSLog(&quot;_timerInGCD invoked.&quot;);
        if (self.timer != nil) {
            dispatch_source_cancel(self.timer!);
        }
        timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);
        dispatch_source_set_timer(timer!, DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC, 0);

        dispatch_source_set_event_handler(timer!, { () -&amp;gt; Void in
            NSLog(&quot;In GCD Timer, block is invoked ...&quot;);

            if(!repeated) {
                dispatch_source_cancel(self.timer!);
                NSLog(&quot;The timer is canceled.&quot;);
            }
        });

        NSLog(&quot;timer will be resumed.&quot;);
        dispatch_resume(timer!);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the console, we get these outputs:&lt;/p&gt;

&lt;h5 id=&quot;gcd-timer-output&quot;&gt;GCD Timer output&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-08-19 14:49:16.251 Timer[97556:2180745] _timerInGCD invoked.
2016-08-19 14:49:16.253 Timer[97556:2180745] timer will be resumed.
2016-08-19 14:49:16.255 Timer[97556:2181222] In GCD Timer, block is invoked ...
2016-08-19 14:49:16.256 Timer[97556:2181222] The timer is canceled.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can see that, the Timer is fired only once, because we canceled the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;when-we-change-the-parameter-repeated-to-be-true-we-get-repeated-gcd-timer-output&quot;&gt;When we change the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;repeated&lt;/code&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, we get repeated GCD Timer output:&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-08-19 14:49:36.031 Timer[97556:2180745] _timerInGCD invoked.
2016-08-19 14:49:36.031 Timer[97556:2180745] timer will be resumed.
2016-08-19 14:49:36.032 Timer[97556:2181938] In GCD Timer, block is invoked ...
2016-08-19 14:49:37.032 Timer[97556:2181938] In GCD Timer, block is invoked ...
2016-08-19 14:49:38.033 Timer[97556:2181938] In GCD Timer, block is invoked ...
2016-08-19 14:49:39.033 Timer[97556:2181938] In GCD Timer, block is invoked ...
2016-08-19 14:49:40.033 Timer[97556:2181938] In GCD Timer, block is invoked ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The Timer fires every second and it will continue firing event until we cancel the dispatch_source.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Warning:&lt;/em&gt; The parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;queue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; must defined in class scope, because the life scope of a function is so short, if we define the &lt;code class=&quot;highlighter-rouge&quot;&gt;queue&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; in a function, the &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD Timer&lt;/code&gt; will not be able to find the &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;queue&lt;/code&gt; when the event fired because the &lt;code class=&quot;highlighter-rouge&quot;&gt;queue&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;timer&lt;/code&gt; is released at the end of the function scope.&lt;/p&gt;

&lt;p&gt;For function control, I add some buttons and actions in the storyboard and code.&lt;/p&gt;

&lt;h5 id=&quot;the-storyboard-looks-like-this&quot;&gt;The storyboard looks like this:&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/201608-nstimer-and-gcd-timer-in-ios/timer-storyboard.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-button-actions-in-code&quot;&gt;The button actions in code:&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/201608-nstimer-and-gcd-timer-in-ios/button-actions-in-code.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;something-need-to-know-about-gcd-timer&quot;&gt;2.3. Something need to know about GCD Timer&lt;/h4&gt;

&lt;p&gt;According to the document of Apple about GCD, we can find the part of GCD Timer.&lt;/p&gt;

&lt;h5 id=&quot;dispatchqueuet&quot;&gt;dispatch_queue_t&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;A dispatch queue is a lightweight object to which your application submits blocks for subsequent execution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We usually use &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_t&lt;/code&gt; to define a queue for later use.&lt;/p&gt;

&lt;h5 id=&quot;dispatchqueuecreate&quot;&gt;dispatch_queue_create&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;Creates a new dispatch queue to which blocks can be submitted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After we define the queue, we also need to create the queue by invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_create&lt;/code&gt; with a name and type, we can pick &lt;code class=&quot;highlighter-rouge&quot;&gt;Serial&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Concurrent&lt;/code&gt; as the queue’s type…&lt;/p&gt;

&lt;h5 id=&quot;dispatchsourcet&quot;&gt;dispatch_source_t&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;typealias dispatch_source_t = OS_dispatch_source;&lt;br /&gt;
Dispatch sources are used to automatically submit event handler blocks to dispatch queues in response to external events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In GCD, we are recommanded to create &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_t&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_t&lt;/code&gt;, so we use &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_t&lt;/code&gt; to define a source for the timer.&lt;/p&gt;

&lt;h5 id=&quot;dispatchsourcesettimer&quot;&gt;dispatch_source_set_timer&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;Sets a start time, interval, and leeway value for a timer source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need to set the timer in the queue by &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_set_timer&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;dispatchsourceseteventhandler&quot;&gt;dispatch_source_set_event_handler&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;Sets the event handler block for the given dispatch source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can set the handler when the timer fires event.&lt;/p&gt;

&lt;h5 id=&quot;dispatchresume&quot;&gt;dispatch_resume&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;Resume the invocation of block objects on a dispatch object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_t&lt;/code&gt; are just put in the queue with handler, they will not be executed unless we resume the dispatch object which contains the queue.&lt;/p&gt;

&lt;h5 id=&quot;dispatchsourcecancel&quot;&gt;dispatch_source_cancel&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;Asynchronously cancels the dispatch source, preventing any further invocation of its event handler block.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we want to cancel the timer, we can just cancel the dispatch object which contains the timer queue.&lt;/p&gt;

&lt;h3 id=&quot;compare-nstimer-and-gcd-timer&quot;&gt;3. Compare NSTimer and GCD Timer&lt;/h3&gt;

&lt;p&gt;When we test the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; in the codes, we know &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; needs to be run in a &lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoop&lt;/code&gt; which is automatically initialized and maintained in main thread but not in other background threads. When we need to setup a &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; in background threads, we need to handle the stuff of &lt;code class=&quot;highlighter-rouge&quot;&gt;NSRunLoop&lt;/code&gt; by ourself, that is not a friendly action.&lt;/p&gt;

&lt;p&gt;We also know, every &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; will retain a strong reference of &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;, this may cause memory leak when the &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; can not be released.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD Timer&lt;/code&gt; is based on &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD (Grand Central Dispatch)&lt;/code&gt;, we just leave all the rest to &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;, we will never need to worry about the memory issues.&lt;/p&gt;

&lt;p&gt;But &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD Time&lt;/code&gt; is not so easy to use because of the API of it, we can modify or create a new function to work like &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt;. In other words, we need to implement these functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;func scheduledTimerWithTimeInterval(ti: NSTimeInterval, block:GCDTimerBlock, repeats yesOrNo: Bool) -&amp;gt; Void;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, we need to define a closure called &lt;code class=&quot;highlighter-rouge&quot;&gt;GCDTimerBlock&lt;/code&gt;, it can look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;typealias GCDTimerBlock = @convention(block) (userInfo:AnyObject?) -&amp;gt; Void;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All together:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;    typealias GCDTimerBlock = @convention(block) (userInfo:AnyObject?) -&amp;gt; Void

    func scheduledTimerWithTimeInterval(ti: UInt64, block:GCDTimerBlock, repeats yesOrNo: Bool) -&amp;gt; Void {
        if (self.timer != nil) {
            dispatch_source_cancel(self.timer!);
        }
        timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);
        dispatch_source_set_timer(timer!, DISPATCH_TIME_NOW, ti * NSEC_PER_SEC, 0);

        dispatch_source_set_event_handler(timer!, { () -&amp;gt; Void in
            NSLog(&quot;In GCD Timer, block is invoked ...&quot;);

            if(!yesOrNo) {
                dispatch_source_cancel(self.timer!);
                NSLog(&quot;The timer is canceled.&quot;);
            }
        });

        NSLog(&quot;timer will be resumed.&quot;);
        dispatch_resume(timer!);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;source-code&quot;&gt;4. Source code&lt;/h3&gt;

&lt;h5 id=&quot;you-can-find-the-source-code--here-httpsgithubcomacttosswift-acttostargetblank-and-you-are-welcomed-to-give-suggestions&quot;&gt;You can find the source code &lt;a href=&quot;https://github.com/acttos/Swift-Acttos&quot; target=&quot;_blank&quot;&gt;[ &lt;em&gt;Here&lt;/em&gt; ]&lt;/a&gt; and you are welcomed to give suggestions.&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;The codes may be updated from time to time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Aug 2016 19:09:27 +0800</pubDate>
        <link>http://www.acttos.org/2016/08/NSTimer-and-GCD-Timer-in-iOS/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/08/NSTimer-and-GCD-Timer-in-iOS/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Open a settings page in iOS</title>
        <description>&lt;h3 id=&quot;general-opening-method&quot;&gt;1. General opening method&lt;/h3&gt;

&lt;p&gt;Sometime, we need to access data may contains privacy(such as:camera,microphone,photo and so on) in user’s mobile device, for that, iOS requires us to acquire an authorization from the device user. We can show up an AlertView for the request, and what we can do more is &lt;code class=&quot;highlighter-rouge&quot;&gt;Open a certain settings page&lt;/code&gt; for user. Let’s figure it out.&lt;/p&gt;

&lt;h5 id=&quot;common-opening-url-in-ios&quot;&gt;Common opening URL in iOS:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;if ([[UIApplication sharedApplication] canOpenURL:url]) {
    [[UIApplication sharedApplication] openURL:url];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically, we can open any legal URLs in iOS. For settings, we use a pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;prefs:root=RootName&amp;amp;path=PathName&lt;/code&gt;, the RootName and PathName can be found in paragraph 2 below.&lt;/p&gt;

&lt;h3 id=&quot;urls-of-settings-in-ios&quot;&gt;2. URLs of settings in iOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;Camera - prefs:root=Privacy&amp;amp;path=CAMERA;
Microphone - prefs:root=Privacy&amp;amp;path=MICROPHONE;
About — prefs:root=General&amp;amp;path=About;
Accessibility — prefs:root=General&amp;amp;path=ACCESSIBILITY;
Airplane Mode On — prefs:root=AIRPLANE_MODE;
Auto-Lock — prefs:root=General&amp;amp;path=AUTOLOCK;
Brightness — prefs:root=Brightness;
Bluetooth — prefs:root=General&amp;amp;path=Bluetooth;
Date &amp;amp; Time — prefs:root=General&amp;amp;path=DATE_AND_TIME;
FaceTime — prefs:root=FACETIME;
General — prefs:root=General;
Keyboard — prefs:root=General&amp;amp;path=Keyboard;
iCloud — prefs:root=CASTLE;
iCloud Storage &amp;amp; Backup — prefs:root=CASTLE&amp;amp;path=STORAGE_AND_BACKUP;
International — prefs:root=General&amp;amp;path=INTERNATIONAL;
Location Services — prefs:root=LOCATION_SERVICES;
Music — prefs:root=MUSIC;
Music Equalizer — prefs:root=MUSIC&amp;amp;path=EQ;
Music Volume Limit — prefs:root=MUSIC&amp;amp;path=VolumeLimit;
Network — prefs:root=General&amp;amp;path=Network;
Nike + iPod — prefs:root=NIKE_PLUS_IPOD;
Notes — prefs:root=NOTES;
Notification — prefs:root=NOTIFICATIONS_ID;
Phone — prefs:root=Phone;
Photos — prefs:root=Photos;
Profile — prefs:root=General&amp;amp;path=ManagedConfigurationList;
Reset — prefs:root=General&amp;amp;path=Reset;
Safari — prefs:root=Safari;
Siri — prefs:root=General&amp;amp;path=Assistant;
Sounds — prefs:root=Sounds;
Software Update — prefs:root=General&amp;amp;path=SOFTWARE_UPDATE_LINK;
Store — prefs:root=STORE;
Twitter — prefs:root=TWITTER;
Usage — prefs:root=General&amp;amp;path=USAGE;
VPN — prefs:root=General&amp;amp;path=Network/VPN;
Wallpaper — prefs:root=Wallpaper;
Wi-Fi — prefs:root=WIFI;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;alertview-in-ios&quot;&gt;3. AlertView in iOS&lt;/h3&gt;

&lt;p&gt;According to the document of Apple, we find that the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertView&lt;/code&gt; is deprecated in &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS 9.0 and later&lt;/code&gt;, for safety we show the AlertView with different ways due to certain systemVersions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;if ([[[UIDevice currentDevice] systemVersion] floatValue] &amp;gt;= 8.0) {
    UIAlertController* alert = [UIAlertController alertControllerWithTitle:@&quot;Authorization Request&quot;
                                                                  message:requestMsg
                                                           preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@&quot;OK&quot;
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                                [self _openURL:_settingsItemURL];
                                                          }];

    [alert addAction:defaultAction];
    [[self _getPresentedViewController] presentViewController:alert animated:YES completion:nil];
} else {
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&quot;Authorization Request&quot; message:tips delegate:self cancelButtonTitle:nil otherButtonTitles:@&quot;OK&quot;, nil];
    [alertView show];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertController&lt;/code&gt; is only available since iOS 8.0, so we set the condition of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement is &lt;code class=&quot;highlighter-rouge&quot;&gt;systemVersion &amp;gt; 8.0&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Aug 2016 20:12:23 +0800</pubDate>
        <link>http://www.acttos.org/2016/08/Open-A-Settings-Page-in-iOS/</link>
        <guid isPermaLink="true">http://www.acttos.org/2016/08/Open-A-Settings-Page-in-iOS/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
