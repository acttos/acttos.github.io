<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Acttos</title>
    <description>Goals determine what you’re going to be.</description>
    <link>http://www.majinshou.cn/</link>
    <atom:link href="http://www.majinshou.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Aug 2016 11:37:58 +0800</pubDate>
    <lastBuildDate>Fri, 12 Aug 2016 11:37:58 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Open a settings page in iOS</title>
        <description>&lt;h3 id=&quot;general-opening-method&quot;&gt;1. General opening method&lt;/h3&gt;

&lt;p&gt;Sometime, we need to access data may contains privacy(such as:camera,microphone,photo and so on) in user’s mobile device, for that, iOS requires us to acquire an authorization from the device user. We can show up an AlertView for the request, and what we can do more is &lt;code class=&quot;highlighter-rouge&quot;&gt;Open a certain settings page&lt;/code&gt; for user. Let’s figure it out.&lt;/p&gt;

&lt;h5 id=&quot;common-opening-url-in-ios&quot;&gt;Common opening URL in iOS:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;if ([[UIApplication sharedApplication] canOpenURL:url]) {
    [[UIApplication sharedApplication] openURL:url];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically, we can open any legal URLs in iOS. For settings, we use a pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;prefs:root=RootName&amp;amp;path=PathName&lt;/code&gt;, the RootName and PathName can be found in paragraph 2 below.&lt;/p&gt;

&lt;h3 id=&quot;urls-of-settings-in-ios&quot;&gt;2. URLs of settings in iOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;Camera - prefs:root=Privacy&amp;amp;path=CAMERA;
Microphone - prefs:root=Privacy&amp;amp;path=MICROPHONE;
About — prefs:root=General&amp;amp;path=About;
Accessibility — prefs:root=General&amp;amp;path=ACCESSIBILITY;
Airplane Mode On — prefs:root=AIRPLANE_MODE;
Auto-Lock — prefs:root=General&amp;amp;path=AUTOLOCK;
Brightness — prefs:root=Brightness;
Bluetooth — prefs:root=General&amp;amp;path=Bluetooth;
Date &amp;amp; Time — prefs:root=General&amp;amp;path=DATE_AND_TIME;
FaceTime — prefs:root=FACETIME;
General — prefs:root=General;
Keyboard — prefs:root=General&amp;amp;path=Keyboard;
iCloud — prefs:root=CASTLE;
iCloud Storage &amp;amp; Backup — prefs:root=CASTLE&amp;amp;path=STORAGE_AND_BACKUP;
International — prefs:root=General&amp;amp;path=INTERNATIONAL;
Location Services — prefs:root=LOCATION_SERVICES;
Music — prefs:root=MUSIC;
Music Equalizer — prefs:root=MUSIC&amp;amp;path=EQ;
Music Volume Limit — prefs:root=MUSIC&amp;amp;path=VolumeLimit;
Network — prefs:root=General&amp;amp;path=Network;
Nike + iPod — prefs:root=NIKE_PLUS_IPOD;
Notes — prefs:root=NOTES;
Notification — prefs:root=NOTIFICATIONS_ID;
Phone — prefs:root=Phone;
Photos — prefs:root=Photos;
Profile — prefs:root=General&amp;amp;path=ManagedConfigurationList;
Reset — prefs:root=General&amp;amp;path=Reset;
Safari — prefs:root=Safari;
Siri — prefs:root=General&amp;amp;path=Assistant;
Sounds — prefs:root=Sounds;
Software Update — prefs:root=General&amp;amp;path=SOFTWARE_UPDATE_LINK;
Store — prefs:root=STORE;
Twitter — prefs:root=TWITTER;
Usage — prefs:root=General&amp;amp;path=USAGE;
VPN — prefs:root=General&amp;amp;path=Network/VPN;
Wallpaper — prefs:root=Wallpaper;
Wi-Fi — prefs:root=WIFI;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;alertview-in-ios&quot;&gt;3. AlertView in iOS&lt;/h3&gt;

&lt;p&gt;According to the document of Apple, we find that the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertView&lt;/code&gt; is deprecated in &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS 9.0 and later&lt;/code&gt;, for safety we show the AlertView with different ways due to certain systemVersions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-oc&quot;&gt;if ([[[UIDevice currentDevice] systemVersion] floatValue] &amp;gt;= 8.0) {
    UIAlertController* alert = [UIAlertController alertControllerWithTitle:@&quot;Authorization Request&quot;
                                                                  message:requestMsg
                                                           preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@&quot;OK&quot;
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                                [self _openURL:_settingsItemURL];
                                                          }];

    [alert addAction:defaultAction];
    [[self _getPresentedViewController] presentViewController:alert animated:YES completion:nil];
} else {
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&quot;Authorization Request&quot; message:tips delegate:self cancelButtonTitle:nil otherButtonTitles:@&quot;OK&quot;, nil];
    [alertView show];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIAlertController&lt;/code&gt; is only available since iOS 8.0, so we set the condition of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement is &lt;code class=&quot;highlighter-rouge&quot;&gt;systemVersion &amp;gt; 8.0&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Aug 2016 11:12:07 +0800</pubDate>
        <link>http://www.majinshou.cn/2016/08/Open-A-Settings-Page-in-iOS/</link>
        <guid isPermaLink="true">http://www.majinshou.cn/2016/08/Open-A-Settings-Page-in-iOS/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>What does &quot;File's Owner&quot; mean?</title>
        <description>&lt;h3 id=&quot;what-is-files-owner-&quot;&gt;1. What is “File’s Owner” ?&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt;, the owner of a file, that is the direct meaning of the words. Every xib file in Xcode has a &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt;. Most of the time,we just ignore the settings, and it works well. That is why we did not pay enough attention to it. When there is an error occured, we do not know what is happening and why.&lt;/p&gt;

&lt;h5 id=&quot;an-error-possibly-caused-by-files-owner&quot;&gt;An error possibly caused by &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt;:&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/files-owner/files-owner-issue.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We searched the possible reasons associated with this error, and found most of the results are about &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt;, so we checked the codes and the settings in xib file and found:&lt;/p&gt;

&lt;h5 id=&quot;the-codes-in-xcode&quot;&gt;The codes in Xcode:&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/files-owner/files-owner-issue-create-from-nib.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-settings-of-files-owner-in-xib-file&quot;&gt;The settings of &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; in xib file:&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/files-owner/files-owner-issue-nib-setting.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
The method &lt;code class=&quot;highlighter-rouge&quot;&gt;loadNibNamed:owner:options&lt;/code&gt; will unarchive the contents of a nib file in the bundle and return an array containing the top-level objects in the nib file. All the objects in the array are instantiated when the nib file is unarchived. But the objects do NOT contain references to &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; object or any proxy objects.
&lt;br /&gt;
Now, Let’s pay more attention to the param &lt;code class=&quot;highlighter-rouge&quot;&gt;owner&lt;/code&gt;, the owner here means &lt;em&gt;The object to assign as the nib’s &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; object&lt;/em&gt;. What is that? I can not understand the meaning of &lt;em&gt;nib’s &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; object&lt;/em&gt;. Can the object be the Class bound with the nib file? Just the same as the class of the current view? I don’t know …&lt;/p&gt;

&lt;p&gt;So,I begin to dig deeper to find what &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; really is and what exactly it can do.&lt;/p&gt;

&lt;h3 id=&quot;files-owner-in-apples-document&quot;&gt;2. File’s Owner in Apple’s document&lt;/h3&gt;

&lt;p&gt;I checked the documents of &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; in Apple official document, and here is the screenshot:&lt;/p&gt;

&lt;h5 id=&quot;files-owner-in-apple-official-documents&quot;&gt;File’s Owner in Apple official documents:&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/files-owner/apples-files-owner.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; object is one of the most important objects in a nib file, and &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; is a placeholder object, and is NOT created when the nib file is loaded. &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; object must be created by yourself and you need to pass it to the nib-loading code to recreate the link of the code and the contents of a nib file. We can tell the &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; object can be &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; in the Xcode and when you link your UI elements with your code (most of the time it is the ViewController class), the &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; object is specified (and it is your ViewController instance).&lt;/p&gt;

&lt;h3 id=&quot;what-does-files-owner-do-in-xib&quot;&gt;3. What does “File’s Owner” do in XIB?&lt;/h3&gt;

&lt;p&gt;From Apple’s official documents we know &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; object plays a role of ‘port’ between your UI elements in xib file and the codes which you designed to control the UI elements. When the xib file is loaded by methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;loadNibNamed:owner:options&lt;/code&gt;, we should pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; object to these methods, and these methods will recreate the connections you designed in &lt;em&gt;Interface Builder&lt;/em&gt;. After the connections are established, your objects in the codes can reference the UI elements object in the xib file and you can control the UI elements through your codes.&lt;/p&gt;

&lt;h3 id=&quot;what-should-we-do-using-files-owner-&quot;&gt;4. What should we do using “File’s Owner” ?&lt;/h3&gt;

&lt;p&gt;So far as we know, We just leave the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; in the settings of &lt;code class=&quot;highlighter-rouge&quot;&gt;Identity Inspector&lt;/code&gt; in Xcode, when the &lt;code class=&quot;highlighter-rouge&quot;&gt;Referencing Outlets&lt;/code&gt; connections are established the &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; is automatically specified.&lt;/p&gt;

&lt;h5 id=&quot;the-default-value-of-files-owner-in-xcode&quot;&gt;The default value of &lt;code class=&quot;highlighter-rouge&quot;&gt;File's Owner&lt;/code&gt; in Xcode:&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/files-owner/files-owner-issue-nib-setting.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-value-of-the-root-view-in-xib-file-is-specified-to-be-a-existed-class-name&quot;&gt;The value of the root view in xib file is specified to be a existed class name:&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/files-owner/files-owner-issue-nib-setting-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;at-last&quot;&gt;5. At last:&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best help documents are Apple’s official programming guide, if we really read them earnestly, we will not get stuck so much.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;thanks-for-visiting&quot;&gt;Thanks for visiting.&lt;/h3&gt;

</description>
        <pubDate>Tue, 09 Aug 2016 21:21:07 +0800</pubDate>
        <link>http://www.majinshou.cn/2016/08/What-does-Files-Owner-mean/</link>
        <guid isPermaLink="true">http://www.majinshou.cn/2016/08/What-does-Files-Owner-mean/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Tips of URL Types in iOS</title>
        <description>&lt;h3 id=&quot;what-is-url-types-and-how-to-use-it-&quot;&gt;What is URL Types and how to use it ?&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URL Types&lt;/code&gt; is a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;URL Definition&lt;/code&gt;, these URL Definitions can be used by any apps if needed. &lt;code class=&quot;highlighter-rouge&quot;&gt;URL Types&lt;/code&gt; make it possible to exchange data amoung different apps.&lt;/p&gt;

&lt;p&gt;When we need to develop with third apps to exchange some data, such as using WeChat to open it’s OpenAPI to identify an user, we need to define URL Types in our app’s Info.plist file by adding URL Types through &lt;code class=&quot;highlighter-rouge&quot;&gt;Targets -&amp;gt; App -&amp;gt; Info -&amp;gt; URL Types&lt;/code&gt;.&lt;/p&gt;

&lt;h6 id=&quot;here-is-an-example&quot;&gt;Here is an example:&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/images/url-types/url-types.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the values in our &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/url-types/url-types-in-plist.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we dig deeper, we can see the source code of &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; which we have added:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/url-types/url-types-in-plist-code.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The key &lt;code class=&quot;highlighter-rouge&quot;&gt;FBundleURLTypes&lt;/code&gt; stands for URLs our app can handle, it is an array, which give us ablitity to handle more than one URL. The key &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleURLName&lt;/code&gt; stands for a category of URL Types in our app, it can be any words you want, just give it a name which can suitably describle the URLs. For example: we use &lt;code class=&quot;highlighter-rouge&quot;&gt;Wechat&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;weixin&lt;/code&gt; for URLs which is called by Wechat(微信), we use &lt;code class=&quot;highlighter-rouge&quot;&gt;Weibo&lt;/code&gt; for URLs which is called by Weibo(微博). But remember: &lt;code class=&quot;highlighter-rouge&quot;&gt;It can be anything you want to input&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The key &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleURLSchemes&lt;/code&gt; defines an array which our app can handle. For example: we add a value &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenDemo&lt;/code&gt; to receive requests from other apps who called &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenDemo://some-parameters&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenDemo://*****&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenDemo&lt;/code&gt; is a key word such as &lt;code class=&quot;highlighter-rouge&quot;&gt;http,https,ftp&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember&lt;/strong&gt;:
The key word &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenDemo&lt;/code&gt; is suggested to be unique from other apps. iOS will ignore the later registeration of URL Types if there is already a same key word &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenDemo&lt;/code&gt; registered.&lt;/p&gt;

&lt;h3 id=&quot;thanks-for-visiting&quot;&gt;Thanks for visiting.&lt;/h3&gt;

</description>
        <pubDate>Mon, 08 Aug 2016 19:51:18 +0800</pubDate>
        <link>http://www.majinshou.cn/2016/08/Tips-of-URL-Types-in-iOS/</link>
        <guid isPermaLink="true">http://www.majinshou.cn/2016/08/Tips-of-URL-Types-in-iOS/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Introduction of CommonUtilities</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;介绍&lt;/h2&gt;

&lt;p&gt;CommonUtilities是一个日常iOS开发通用工具类的Framework，采用Objective-C开发。
所有代码来源并总结于平时工作中，会不定期更新，欢迎提出意见和建议。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;使用方法&lt;/h2&gt;
&lt;p&gt;引入CommonUtilities.h即可使用各个工具所包含的方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &quot;CommonUtilities.h&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;功能介绍&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;存储功能相关&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;CUStorage.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  将自定义service的数据写入系统Keychain中，避免用户卸载软件后，data发生变化，用于IMEI或者UserId
 *
 *  @param key  用来存储数据的Key
 *  @param data 需要存储的数据
 */
- (void)storeInKeychainWithKey:(NSString *)key data:(id)data;
/**
 *  根据service名称获取写入系统Keychain的数据
 *
 *  @param key 获取数据对应的Key
 *
 *  @return 存储在keychain中的数据
 */
- (id)loadFromKeychainWithKey:(NSString *)key;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;颜色设置相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUColor.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  根据传递的16进制数据生成UIColor实例
 *
 *  @param hexValue 16进制的颜色表示方式。如：0xFF00FF
 *
 *  @return 对应色值的UIColor实例
 */
+ (UIColor *)colorWithHex:(NSInteger)hexValue;
/**
 *  根据传递的16进制数据生成UIColor实例，该UIColor包含指定的透明度
 *
 *  @param hexValue 16进制的颜色表示方式。如：0xFF00FF
 *  @param alpha    颜色的透明度
 *
 *  @return 对应色值的UIColor实例
 */
+ (UIColor *)colorWithHex:(NSInteger)hexValue alpha:(CGFloat)alpha;
/**
 *  根据传递的色值字符串生成UIColor实例
 *
 *  @param hexString 以##开头的16进制色值字符串。如：##FF00FF
 *
 *  @return 对应色值的UIColor实例
 */
+ (UIColor *)colorWithHexString:(NSString *)hexString;
/**
 *  根据传递的色值字符串生成UIColor实例，该UIColor包含指定的透明度
 *
 *  @param hexString 以##开头的16进制色值字符串。如：##FF00FF
 *  @param alpha     颜色的透明度
 *
 *  @return 对应色值的UIColor实例
 */
+ (UIColor *)colorWithHexString:(NSString *)hexString alpha:(CGFloat)alpha;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;文件目录相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUFile.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  返回当前App的Documents路径
 *
 *  @return Documents的URL
 */
+(NSURL *)getDocumentsDirectory;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;json&quot;&gt;JSON解析相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUJSON.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  根据给定的NSArray实例生成JSON字符串
 *
 *  @param array NSArray实例
 *
 *  @return NSArray对应的JSON字符串
 */
+(NSString *)JSONStringFromArray:(NSArray *)array;
/**
 *  根据给定的NSDictionary实例生成JSON字符串
 *
 *  @param dictionary NSDictionary实例
 *
 *  @return NSDictionary对应的JSON字符串
 */
+(NSString *)JSONStringFromDictionary:(NSDictionary *)dictionary;
/**
 *  将任意对象转换成JSON字符串，当给定object为nil或者不可解析为JSON时，返回错误
 *
 *  @param object 任意NSObject对象
 *
 *  @return 解析的JSON或错误内容
 */
+(NSString *)parseJSONStringFromObject:(NSObject *)object;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;日期操作相关&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;CUDate.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  根据当前时间创建时间戳
 *
 *  @return 当前时间的时间戳，精确到毫秒
 */
+(long long)generateMillisecondTime;
/**
 *  根据给定日期创建时间戳
 *
 *  @param date 需要转换为时间戳的NSDate对象
 *
 *  @return 转换后的时间戳，精确到毫秒
 */
+(long long)generateMillisecondTimeWithDate:(NSDate *)date;
/**
 *  将毫秒的时间转化为NSDate实例
 *
 *  @param milliseconds 某个时间对应的毫秒值
 *
 *  @return 给定时间戳对应的NSDate对象
 */
+(NSDate *)generateDateWithMilliseconds:(long long)milliseconds;
/**
 *  将NSDate对象进行格式化，采用当前时区
 *
 *  @param date   NSDate对象
 *  @param format 格式化字符串，如果为空或者nil，采用“yyyy-MM-dd HH:mm:ss”
 *
 *  @return 格式化后的字符串
 */
+(NSString *)stringOfDate:(NSDate *)date withFormat:(NSString *)format;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;开源协议&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/acttos/CommonUtilities&quot;&gt;[CommonUtilities]&lt;/a&gt; 基于 &lt;a href=&quot;http://www.gnu.org/licenses/gpl.html&quot;&gt;[GPL(General Public License)]&lt;/a&gt; 协议开源。
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;感谢来访！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 06 Aug 2016 20:21:18 +0800</pubDate>
        <link>http://www.majinshou.cn/2016/08/Introduction-of-CommonUtilities/</link>
        <guid isPermaLink="true">http://www.majinshou.cn/2016/08/Introduction-of-CommonUtilities/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>How to use GCD in Swift ?</title>
        <description>&lt;h2 id=&quot;condition&quot;&gt;#1. Condition&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;The first time GCD came to my sight,I was impressed by the beauty and efficient of it.
For a while, I used GCD in all my Network modules. I put the Network operation which always costs a little time in the background thread queue,and when the data is ready,I switch to the main thread to refresh UI. I believe most of us,the iOS developer,would act like this.&lt;/p&gt;

&lt;p&gt;Here is an example of GCD in Objective-C:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

    //Put the codes which will cost a little more time here.
    self.filterList = [NetworkDispatchManager getFilterListWithURL:self.serverURL];

    //When the data is ready,we switch to main thread to refresh UI.
    dispatch_async(dispatch_get_main_queue(), ^{
        //Refresh UI.
        [self.tableView reloadData];
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Familiar? That is right, this is the common solution when we need to load a data from Network or read|write files on disk and then refresh the UI on the screen.&lt;/p&gt;

&lt;p&gt;Now,I have an idea,what if I change the codes above in to Swift ? What would it look like ?&lt;/p&gt;

&lt;p&gt;So I start my work to exchange:&lt;/p&gt;

&lt;h2 id=&quot;the-code-exchanged-in-swift&quot;&gt;#2.The Code exchanged in Swift&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Here is my implementation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    //Put the codes which will cost a little more time here.
    self.filterList = NetworkDispatchManager.getFilterListWithURL(self.serverURL);
    //When the data is ready,we switch to main thread to refresh UI.
    dispatch_async(dispatch_get_main_queue(), ^{
        //Refresh UI.
        self.tableView.reloadData();
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can see that GCD in both Objective-C and Swift are almost the same.&lt;/p&gt;

&lt;h2 id=&quot;something-about-closure-in-swift&quot;&gt;#3. Something about Closure in Swift&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;The closure in Swift is defined like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(arguments)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Typs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;statements&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can set the closure as a value of a variable like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let aClosure = aClosureDefinition&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is an implementation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Define a closure and set it to variable `aClosure`:
let aClosure = {(location: NSURL?, response: NSURLResponse?, error: NSError?) in
    // For a demonstration here just print a message.
    print(&quot;The statement of a closure&quot;);
};

/**
 * The function who uses the closure defined before.
 */
func useClosure() -&amp;gt; Void {
    if let url: NSURL = NSURL(string: &quot;http://domain.com/files/a-big-file.zip&quot;) {
        let request: NSURLRequest = NSURLRequest(URL: url, cachePolicy: NSURLRequestCachePolicy.ReturnCacheDataElseLoad, timeoutInterval: 10);
        let session:NSURLSession = NSURLSession.sharedSession();
        //We use variable `aClosure` as the argument `completionHandler`
        let task:NSURLSessionDownloadTask = session.downloadTaskWithRequest(request, completionHandler: aClosure);

        task.resume();
    } else {
        print(&quot;The URL is illegal.&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;thanks-for-your-visiting&quot;&gt;Thanks for your visiting.&lt;/h3&gt;
</description>
        <pubDate>Thu, 04 Aug 2016 19:51:18 +0800</pubDate>
        <link>http://www.majinshou.cn/2016/08/how-to-use-GCD-in-swift/</link>
        <guid isPermaLink="true">http://www.majinshou.cn/2016/08/how-to-use-GCD-in-swift/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>The Colorful UILabel in iOS</title>
        <description>&lt;h1 id=&quot;the-colorful-uilabel-in-ios-development&quot;&gt;The Colorful UILabel in iOS development&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Once up on a time,I had a request which needed to display a colorful UILabel in the screen.&lt;/p&gt;

&lt;p&gt;The product manager said the colorful texts can catch the eyes of audiences.&lt;/p&gt;

&lt;p&gt;OK,I sure chose to believe them.&lt;/p&gt;

&lt;p&gt;Then,I had a question:&lt;/p&gt;

&lt;h2 id=&quot;how-to-set-different-colors-to-each-word-in-the-uilabel&quot;&gt;1. How to set different colors to each word in the UILabel?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;I started my work with my own ideas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An UILabel can display the texts;&lt;/li&gt;
  &lt;li&gt;The color of the texts can be set by ‘UILabel.textColor’;&lt;/li&gt;
  &lt;li&gt;Adding two UILabels with different colors will do;&lt;/li&gt;
  &lt;li&gt;Excellent! (I said to myself).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I opened the Xcode.app to edit my codes like this:&lt;/p&gt;

&lt;h3 id=&quot;the-way-i-did-in-the-past-time&quot;&gt;1.1 The way I did in the past time&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 Initializes a colorful label container view

 - returns: A colorful label container view instance
 */
func initColorfulLabel() -&amp;gt; UIView {
    let containerViewFrame:CGRect = CGRect(x: -7, y: 100, width: self.view.bounds.width, height: 20);
    let containerView:UIView = UIView(frame: containerViewFrame);

    let redLabelFrame = CGRect(x: 0, y: 0, width: containerView.bounds.width / 2, height: 20);
    let redLabel:UILabel = UILabel(frame: redLabelFrame);
    redLabel.text = &quot;RED&quot;;
    redLabel.textColor = UIColor.redColor();
    redLabel.textAlignment = NSTextAlignment.Right;

    containerView.addSubview(redLabel);

    let blueLabelFrame = CGRect(x: containerView.bounds.width / 2, y: 0, width: containerView.bounds.width / 2, height: 20);
    let blueLabel:UILabel = UILabel(frame: blueLabelFrame);
    blueLabel.text = &quot; BLUE&quot;;
    blueLabel.textColor = UIColor.blueColor();
    blueLabel.textAlignment = NSTextAlignment.Left;

    containerView.addSubview(blueLabel);


    return containerView;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Oh,My God,It worked! ^0^:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/colorful-uilabel/colorfulLabelsInContainerView.png&quot; alt=&quot;colorfulLabelsInContainerView.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-suggested-way-a-mentor-told-me-recently&quot;&gt;1.2 The suggested way a mentor told me recently&lt;/h3&gt;

&lt;p&gt;My mentor told me that UILabel supports different texts with different colors by setting UILabel’s attributedText.&lt;/p&gt;

&lt;p&gt;Here is the newer one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 Initializes a real colorful UILabel instance instead of a container view,this method is guided by a mentor

 - returns: A real colorful UILabel instance
 */
func initColorfulLabelOfMentor() -&amp;gt; UILabel {
    let str:NSMutableAttributedString = NSMutableAttributedString(string: &quot;RED BLUE&quot;);
    str.addAttribute(NSForegroundColorAttributeName, value: UIColor.redColor(), range: NSMakeRange(0, 3));
    str.addAttribute(NSForegroundColorAttributeName, value: UIColor.blueColor(), range: NSMakeRange(4, 4));

    let labelFrame = CGRect(x: 0, y: 140, width: self.view.bounds.width, height: 20);
    let label:UILabel = UILabel(frame: labelFrame);
    label.attributedText = str;
    label.textAlignment = NSTextAlignment.Center;


    return label;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It works too:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/colorful-uilabel/colorfulLabel.png&quot; alt=&quot;colorfulLabel.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After I made the colorful texts in the screen,the product manager said we still need to add a shadow to the text, and again, for catching the eyes of audiences.&lt;/p&gt;

&lt;p&gt;OK,I would do it. Because I always chose to believe them.&lt;/p&gt;

&lt;p&gt;So,I had a new question here:&lt;/p&gt;

&lt;h2 id=&quot;how-to-add-a-shadow-to-the-words-in-uilabel&quot;&gt;2. How to add a shadow to the words in UILabel?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;I started my thinking again,of course I chose to add two different UILabels to make the shadow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add an UILabel to display the given texts with certain color(color of the shadow);&lt;/li&gt;
  &lt;li&gt;Add another UILabel to display the texts with shadow color;&lt;/li&gt;
  &lt;li&gt;Put the two UILabels together into a container UIView to make a shadow;&lt;/li&gt;
  &lt;li&gt;Return the UIView instance called ‘containerView’.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So,I put my ideas into codes:&lt;/p&gt;

&lt;h3 id=&quot;the-way-i-did-in-the-past-time-1&quot;&gt;2.1 The way I did in the past time&lt;/h3&gt;

&lt;p&gt;Here is the implementation of my idea:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 Initializes a shadow label container view

 - returns: A UIView instance which contains two UILabels to display a shadow
 */
func initShadowLabel() -&amp;gt; UIView {

    let containerViewFrame:CGRect = CGRect(x: 0, y: 180, width: self.view.bounds.width, height: 20);
    let containerView:UIView = UIView(frame: containerViewFrame);

    let lowerLabelFrame = CGRect(x: 1, y: 1, width: self.view.bounds.width, height: 20);
    let lowerLabel:UILabel = UILabel(frame: lowerLabelFrame);
    lowerLabel.text = &quot;LABEL WITH SHADOW&quot;;
    lowerLabel.textColor = UIColor.blueColor();
    lowerLabel.textAlignment = NSTextAlignment.Center;

    containerView.addSubview(lowerLabel);


    let upperLabelFrame = CGRect(x: 0, y: 0, width: self.view.bounds.width, height: 20);
    let upperLabel:UILabel = UILabel(frame: upperLabelFrame);
    upperLabel.text = &quot;LABEL WITH SHADOW&quot;;
    upperLabel.textColor = UIColor.redColor();
    upperLabel.textAlignment = NSTextAlignment.Center;

    containerView.addSubview(upperLabel);


    return containerView;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Oh,My God,It worked again:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/colorful-uilabel/shadowLabelsInContainerView.png&quot; alt=&quot;shadowLabelsInContainerView.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-suggested-way-of-a-mentor&quot;&gt;2.2 The suggested way of a mentor&lt;/h3&gt;

&lt;p&gt;Once again,a mentor occured,And he gave me another way to implement the shadow in UILabel:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 Initializes a real shadow UILabel instance instead of a container view,this method is guided by a mentor

 - returns: A UILabel which has a shadow
 */
func initShadowLabelOfMentor() -&amp;gt; UILabel {

    let labelFrame = CGRect(x: 0, y: 220, width: self.view.bounds.width, height: 20);
    let label:UILabel = UILabel(frame: labelFrame);
    label.text = &quot;LABEL WITH SHADOW&quot;;
    label.textColor = UIColor.redColor();
    label.shadowColor = UIColor.blueColor();
    label.shadowOffset = CGSize(width: 1, height: 1);
    label.textAlignment = NSTextAlignment.Center;


    return label;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See? It is more simple and clearer.&lt;/p&gt;

&lt;p&gt;Here is the result in picture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/colorful-uilabel/shadowLabel.png&quot; alt=&quot;shadowLabel.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;3. Source Code:&lt;/h2&gt;

&lt;p&gt;You can find all the codes &lt;a href=&quot;https://github.com/acttos/ColorfulLabel&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Aug 2016 19:36:51 +0800</pubDate>
        <link>http://www.majinshou.cn/2016/08/the-colorful-uilabel/</link>
        <guid isPermaLink="true">http://www.majinshou.cn/2016/08/the-colorful-uilabel/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>The source code preview of last post of 'What are Markdown Documents ?'</title>
        <description>&lt;h1 id=&quot;we-will-use-official-document-of-mouhttp25io-to-explain-markdown&quot;&gt;We will use official document of &lt;a href=&quot;http://25.io&quot;&gt;Mou&lt;/a&gt; to explain ‘Markdown’:&lt;/h1&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Mou

![Mou icon](http://25.io/mou/Mou_128.png)

## Overview

**Mou**, the missing Markdown editor for *web developers*.

### Syntax

#### Strong and Emphasize

**strong** or __strong__ ( Cmd + B )

*emphasize* or _emphasize_ ( Cmd + I )

**Sometimes I want a lot of text to be bold.
Like, seriously, a _LOT_ of text**

#### Blockquotes

&amp;gt; Right angle brackets &amp;amp;gt; are used for block quotes.

#### Links and Email

An email &amp;lt;example@example.com&amp;gt; link.

Simple inline link &amp;lt;http://chenluois.com&amp;gt;, another inline link [Smaller](http://25.io/smaller/), one more inline link with title [Resize](http://resizesafari.com &quot;a Safari extension&quot;).

A [reference style][id] link. Input id, then anywhere in the doc, define the link with corresponding id:

[id]: http://25.io/mou/ &quot;Markdown editor on Mac OS X&quot;

Titles ( or called tool tips ) in the links are optional.

#### Images

An inline image ![Smaller icon](http://25.io/smaller/favicon.ico &quot;Title here&quot;), title is optional.

A ![Resize icon][2] reference style image.

[2]: http://resizesafari.com/favicon.ico &quot;Title&quot;

#### Inline code and Block code

Inline code are surround by `backtick` key. To create a block code:

	Indent each line by at least 1 tab, or 4 spaces.
    var Mou = exactlyTheAppIwant;

####  Ordered Lists

Ordered lists are created using &quot;1.&quot; + Space:

1. Ordered list item
2. Ordered list item
3. Ordered list item

#### Unordered Lists

Unordered list are created using &quot;*&quot; + Space:

* Unordered list item
* Unordered list item
* Unordered list item

Or using &quot;-&quot; + Space:

- Unordered list item
- Unordered list item
- Unordered list item

#### Hard Linebreak

End a line with two or more spaces will create a hard linebreak, called `&amp;lt;br /&amp;gt;` in HTML. ( Control + Return )  
Above line ended with 2 spaces.

#### Horizontal Rules

Three or more asterisks or dashes:

***

---

- - - -

#### Headers

Setext-style:

This is H1
==========

This is H2
----------

atx-style:

# This is H1
## This is H2
### This is H3
#### This is H4
##### This is H5
###### This is H6


### Extra Syntax

#### Footnotes

Footnotes work mostly like reference-style links. A footnote is made of two things: a marker in the text that will become a superscript number; a footnote definition that will be placed in a list of footnotes at the end of the document. A footnote looks like this:

That's some text with a footnote.[^1]

[^1]: And that's the footnote.


#### Strikethrough

Wrap with 2 tilde characters:

~~Strikethrough~~


#### Fenced Code Blocks

Start with a line containing 3 or more backticks, and ends with the first line with the same number of backticks:

Begin with ```
Fenced code blocks are like Stardard Markdown’s regular code
blocks, except that they’re not indented and instead rely on
a start and end fence lines to delimit the code block.
End with ```

#### Tables

A simple table looks like this:

First Header | Second Header | Third Header
------------ | ------------- | ------------
Content Cell | Content Cell  | Content Cell
Content Cell | Content Cell  | Content Cell

If you wish, you can add a leading and tailing pipe to each line of the table:

| First Header | Second Header | Third Header |
| ------------ | ------------- | ------------ |
| Content Cell | Content Cell  | Content Cell |
| Content Cell | Content Cell  | Content Cell |

Specify alignment for each column by adding colons to separator lines:

First Header | Second Header | Third Header
:----------- | :-----------: | -----------:
Left         | Center        | Right
Left         | Center        | Right


### Shortcuts

#### View

* Toggle live preview: Shift + Cmd + I
* Toggle Words Counter: Shift + Cmd + W
* Toggle Transparent: Shift + Cmd + T
* Toggle Floating: Shift + Cmd + F
* Left/Right = 1/1: Cmd + 0
* Left/Right = 3/1: Cmd + +
* Left/Right = 1/3: Cmd + -
* Toggle Writing orientation: Cmd + L
* Toggle fullscreen: Control + Cmd + F

#### Actions

* Copy HTML: Option + Cmd + C
* Strong: Select text, Cmd + B
* Emphasize: Select text, Cmd + I
* Inline Code: Select text, Cmd + K
* Strikethrough: Select text, Cmd + U
* Link: Select text, Control + Shift + L
* Image: Select text, Control + Shift + I
* Select Word: Control + Option + W
* Select Line: Shift + Cmd + L
* Select All: Cmd + A
* Deselect All: Cmd + D
* Convert to Uppercase: Select text, Control + U
* Convert to Lowercase: Select text, Control + Shift + U
* Convert to Titlecase: Select text, Control + Option + U
* Convert to List: Select lines, Control + L
* Convert to Blockquote: Select lines, Control + Q
* Convert to H1: Cmd + 1
* Convert to H2: Cmd + 2
* Convert to H3: Cmd + 3
* Convert to H4: Cmd + 4
* Convert to H5: Cmd + 5
* Convert to H6: Cmd + 6
* Convert Spaces to Tabs: Control + [
* Convert Tabs to Spaces: Control + ]
* Insert Current Date: Control + Shift + 1
* Insert Current Time: Control + Shift + 2
* Insert entity &amp;lt;: Control + Shift + ,
* Insert entity &amp;gt;: Control + Shift + .
* Insert entity &amp;amp;: Control + Shift + 7
* Insert entity Space: Control + Shift + Space
* Insert Scriptogr.am Header: Control + Shift + G
* Shift Line Left: Select lines, Cmd + [
* Shift Line Right: Select lines, Cmd + ]
* New Line: Cmd + Return
* Comment: Cmd + /
* Hard Linebreak: Control + Return

#### Edit

* Auto complete current word: Esc
* Find: Cmd + F
* Close find bar: Esc

#### Post

* Post on Scriptogr.am: Control + Shift + S
* Post on Tumblr: Control + Shift + T

#### Export

* Export HTML: Option + Cmd + E
* Export PDF:  Option + Cmd + P


### And more?

Don't forget to check Preferences, lots of useful options are there.

Follow [@Mou](https://twitter.com/mou) on Twitter for the latest news.

For feedback, use the menu `Help` - `Send Feedback`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 18:30:31 +0800</pubDate>
        <link>http://www.majinshou.cn/2016/07/source-of-markdown-documents/</link>
        <guid isPermaLink="true">http://www.majinshou.cn/2016/07/source-of-markdown-documents/</guid>
        
        
        <category>Markdown</category>
        
      </item>
    
      <item>
        <title>What are Markdown Documents ?</title>
        <description>&lt;h1 id=&quot;we-will-use-official-document-of-mouhttp25io-to-explain-markdown&quot;&gt;We will use official document of &lt;a href=&quot;http://25.io&quot;&gt;Mou&lt;/a&gt; to explain ‘Markdown’:&lt;/h1&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/images/markdown-intro-01.png&quot; alt=&quot;Intro One&quot; /&gt;
&lt;img src=&quot;/images/markdown-intro-02.png&quot; alt=&quot;Intro Two&quot; /&gt;
&lt;img src=&quot;/images/markdown-intro-03.png&quot; alt=&quot;Intro Three&quot; /&gt;
&lt;img src=&quot;/images/markdown-intro-04.png&quot; alt=&quot;Intro Four&quot; /&gt;
&lt;img src=&quot;/images/markdown-intro-05.png&quot; alt=&quot;Intro Five&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 18:17:31 +0800</pubDate>
        <link>http://www.majinshou.cn/2016/07/what-are-markdown-documents/</link>
        <guid isPermaLink="true">http://www.majinshou.cn/2016/07/what-are-markdown-documents/</guid>
        
        
        <category>Markdown</category>
        
      </item>
    
      <item>
        <title>What is MVC,MVP and MVVM ?</title>
        <description>&lt;p&gt;Check the &lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html&quot;&gt;MVC，MVP 和 MVVM 的图示&lt;/a&gt; to view detail info.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 10:28:31 +0800</pubDate>
        <link>http://www.majinshou.cn/2016/07/what-is-MVC-MVP-MVVM/</link>
        <guid isPermaLink="true">http://www.majinshou.cn/2016/07/what-is-MVC-MVP-MVVM/</guid>
        
        
        <category>Design-Pattern</category>
        
      </item>
    
  </channel>
</rss>
